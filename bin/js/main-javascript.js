// Generated by Haxe 3.4.7
(function () { "use strict";
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
EReg.__name__ = true;
EReg.prototype = {
	match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
};
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
var Lambda = function() { };
Lambda.__name__ = true;
Lambda.exists = function(it,f) {
	var x = it.iterator();
	while(x.hasNext()) {
		var x1 = x.next();
		if(f(x1)) {
			return true;
		}
	}
	return false;
};
var List = function() {
	this.length = 0;
};
List.__name__ = true;
List.prototype = {
	iterator: function() {
		return new _$List_ListIterator(this.h);
	}
};
var _$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
_$List_ListNode.__name__ = true;
var _$List_ListIterator = function(head) {
	this.head = head;
};
_$List_ListIterator.__name__ = true;
_$List_ListIterator.prototype = {
	hasNext: function() {
		return this.head != null;
	}
	,next: function() {
		var val = this.head.item;
		this.head = this.head.next;
		return val;
	}
};
var Main = function() {
	Utils.loadConfig("./config.json",$bind(this,this.init));
};
Main.__name__ = true;
Main.main = function() {
	return new Main();
};
Main.prototype = {
	init: function() {
		model_MainMenuDefaultValues.init();
		this.soundPlayer = new sounds_SoundPlayer();
		this.HTML5game = window.document.getElementById("HTML5game");
		window.addEventListener("resize",$bind(this,this.onResize));
		this.sidePanelControl = new htmlcontrols_SidePanelControl();
		this.mainMenuControl = new htmlcontrols_MainMenuControl($bind(this,this.onLogin));
		this.phaserGame = new phasergame_PhaserGame();
		this.onResize();
	}
	,onResize: function() {
		var windowWidth = window.innerWidth;
		var windowHeight = window.innerHeight;
		var multiplayer = windowWidth / 950 < windowHeight / 654 ? windowWidth / 950 : windowHeight / 654;
		this.phaserGame.onResize(windowWidth,windowHeight,multiplayer);
		this.sidePanelControl.onResize(windowWidth,windowHeight,multiplayer);
		this.mainMenuControl.onResize(windowWidth,windowHeight);
	}
	,onLogin: function(configuration) {
		model_PhaserGameModel.init(configuration);
		this.sidePanelControl.init();
		this.sidePanelControl.show();
		this.mainMenuControl.hide();
		this.phaserGame.init(this.sidePanelControl);
		this.phaserGame.show();
		if(model_PhaserGameModel.screenMode == "Fullscreen") {
			this.HTML5game.requestFullscreen();
		}
	}
};
Math.__name__ = true;
var Reflect = function() { };
Reflect.__name__ = true;
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		return null;
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.isFunction = function(f) {
	if(typeof(f) == "function") {
		return !(f.__name__ || f.__ename__);
	} else {
		return false;
	}
};
Reflect.compare = function(a,b) {
	if(a == b) {
		return 0;
	} else if(a > b) {
		return 1;
	} else {
		return -1;
	}
};
Reflect.compareMethods = function(f1,f2) {
	if(f1 == f2) {
		return true;
	}
	if(!Reflect.isFunction(f1) || !Reflect.isFunction(f2)) {
		return false;
	}
	if(f1.scope == f2.scope && f1.method == f2.method) {
		return f1.method != null;
	} else {
		return false;
	}
};
Reflect.isEnumValue = function(v) {
	if(v != null) {
		return v.__enum__ != null;
	} else {
		return false;
	}
};
Reflect.copy = function(o) {
	var o2 = { };
	var _g = 0;
	var _g1 = Reflect.fields(o);
	while(_g < _g1.length) {
		var f = _g1[_g];
		++_g;
		o2[f] = Reflect.field(o,f);
	}
	return o2;
};
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && (HxOverrides.cca(x,1) == 120 || HxOverrides.cca(x,1) == 88)) {
		v = parseInt(x);
	}
	if(isNaN(v)) {
		return null;
	}
	return v;
};
Std.random = function(x) {
	if(x <= 0) {
		return 0;
	} else {
		return Math.floor(Math.random() * x);
	}
};
var Utils = function() { };
Utils.__name__ = true;
Utils.distanceBetween = function(x1,y1,x2,y2) {
	var dx = x1 - x2;
	var dy = y1 - y2;
	return Math.sqrt(dx * dx + dy * dy);
};
Utils.getRandomScreenX = function() {
	return Std.random(950);
};
Utils.getRandomScreenY = function() {
	return Std.random(654);
};
Utils.getSkinByColor = function(color) {
	switch(color) {
	case "green":
		return 2;
	case "red":
		return 1;
	default:
		return 3;
	}
};
Utils.getColorBySkin = function(skin) {
	switch(skin) {
	case 1:
		return "red";
	case 2:
		return "green";
	default:
		return "blue";
	}
};
Utils.loadFile = function(fileUrl,onLoad) {
	var http = new haxe_Http(fileUrl);
	http.onData = function(data) {
		onLoad(data);
	};
	http.onError = function(error) {
		console.log("error: " + error);
	};
	http.request();
};
Utils.loadConfig = function(configUrl,onLoad) {
	Utils.onLoadAll = onLoad;
	Utils.loadFile(configUrl,Utils.onConfigLoad);
};
Utils.onConfigLoad = function(data) {
	Utils.dataStorage = JSON.parse(data);
	Utils.parseDataTypes();
	Utils.loadFile(Utils.getDataStorage().General.localizationFile,Utils.onLocalizationLoad);
};
Utils.onLocalizationLoad = function(data) {
	var parse = JSON.parse(data).texts;
	var _g = 0;
	var _g1 = Reflect.fields(parse);
	while(_g < _g1.length) {
		var field = _g1[_g];
		++_g;
		var this1 = Utils.localizationStorage;
		var value = Reflect.field(parse,field);
		var _this = this1;
		if(__map_reserved[field] != null) {
			_this.setReserved(field,value);
		} else {
			_this.h[field] = value;
		}
	}
	Utils.onLoadAll();
};
Utils.getDataStorage = function() {
	return Utils.dataStorage.configsList;
};
Utils.getLocalization = function() {
	return Utils.localizationStorage;
};
Utils.parseDataTypes = function() {
	Utils.parseAbstractCharacterAssetsConfig(Utils.getDataStorage().PlayersAssets);
	Utils.parseAbstractCharacterAssetsConfig(Utils.getDataStorage().MobsAssets);
	Utils.parseGameConfiguration(Utils.getDataStorage().MainMenu.defaultGameConfiguration);
};
Utils.parseAbstractCharacterAssetsConfig = function(assetsConfig) {
	assetsConfig.frameSize = Std.parseInt(assetsConfig.frameSize);
	assetsConfig.skins = Std.parseInt(assetsConfig.skins);
};
Utils.parseGameConfiguration = function(config) {
	config.showLabel = config.showLabel == "true";
	config.baseExpGain = Std.parseInt(config.baseExpGain);
	config.teamMode = config.teamMode == "true";
	config.mobAmount = Std.parseInt(config.mobAmount);
};
var haxe_IMap = function() { };
haxe_IMap.__name__ = true;
var haxe_Http = function(url) {
	this.url = url;
	this.headers = new List();
	this.params = new List();
	this.async = true;
	this.withCredentials = false;
};
haxe_Http.__name__ = true;
haxe_Http.prototype = {
	request: function(post) {
		var me = this;
		me.responseData = null;
		var r = this.req = js_Browser.createXMLHttpRequest();
		var onreadystatechange = function(_) {
			if(r.readyState != 4) {
				return;
			}
			var s;
			try {
				s = r.status;
			} catch( e ) {
				s = null;
			}
			if(s != null && "undefined" !== typeof window) {
				var protocol = window.location.protocol.toLowerCase();
				var rlocalProtocol = new EReg("^(?:about|app|app-storage|.+-extension|file|res|widget):$","");
				var isLocal = rlocalProtocol.match(protocol);
				if(isLocal) {
					if(r.responseText != null) {
						s = 200;
					} else {
						s = 404;
					}
				}
			}
			if(s == undefined) {
				s = null;
			}
			if(s != null) {
				me.onStatus(s);
			}
			if(s != null && s >= 200 && s < 400) {
				me.req = null;
				me.onData(me.responseData = r.responseText);
			} else if(s == null) {
				me.req = null;
				me.onError("Failed to connect or resolve host");
			} else {
				switch(s) {
				case 12007:
					me.req = null;
					me.onError("Unknown host");
					break;
				case 12029:
					me.req = null;
					me.onError("Failed to connect to host");
					break;
				default:
					me.req = null;
					me.responseData = r.responseText;
					me.onError("Http Error #" + r.status);
				}
			}
		};
		if(this.async) {
			r.onreadystatechange = onreadystatechange;
		}
		var uri = this.postData;
		if(uri != null) {
			post = true;
		} else {
			var _g_head = this.params.h;
			while(_g_head != null) {
				var val = _g_head.item;
				_g_head = _g_head.next;
				var p = val;
				if(uri == null) {
					uri = "";
				} else {
					uri += "&";
				}
				var s1 = p.param;
				var uri1 = encodeURIComponent(s1) + "=";
				var s2 = p.value;
				uri += uri1 + encodeURIComponent(s2);
			}
		}
		try {
			if(post) {
				r.open("POST",this.url,this.async);
			} else if(uri != null) {
				var question = this.url.split("?").length <= 1;
				r.open("GET",this.url + (question ? "?" : "&") + uri,this.async);
				uri = null;
			} else {
				r.open("GET",this.url,this.async);
			}
		} catch( e1 ) {
			if (e1 instanceof js__$Boot_HaxeError) e1 = e1.val;
			me.req = null;
			this.onError(e1.toString());
			return;
		}
		r.withCredentials = this.withCredentials;
		if(!Lambda.exists(this.headers,function(h) {
			return h.header == "Content-Type";
		}) && post && this.postData == null) {
			r.setRequestHeader("Content-Type","application/x-www-form-urlencoded");
		}
		var _g_head1 = this.headers.h;
		while(_g_head1 != null) {
			var val1 = _g_head1.item;
			_g_head1 = _g_head1.next;
			var h1 = val1;
			r.setRequestHeader(h1.header,h1.value);
		}
		r.send(uri);
		if(!this.async) {
			onreadystatechange(null);
		}
	}
	,onData: function(data) {
	}
	,onError: function(msg) {
	}
	,onStatus: function(status) {
	}
};
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
haxe_Timer.__name__ = true;
haxe_Timer.prototype = {
	stop: function() {
		if(this.id == null) {
			return;
		}
		clearInterval(this.id);
		this.id = null;
	}
	,run: function() {
	}
};
var haxe_ds_BalancedTree = function() {
};
haxe_ds_BalancedTree.__name__ = true;
haxe_ds_BalancedTree.prototype = {
	set: function(key,value) {
		this.root = this.setLoop(key,value,this.root);
	}
	,get: function(key) {
		var node = this.root;
		while(node != null) {
			var c = this.compare(key,node.key);
			if(c == 0) {
				return node.value;
			}
			if(c < 0) {
				node = node.left;
			} else {
				node = node.right;
			}
		}
		return null;
	}
	,setLoop: function(k,v,node) {
		if(node == null) {
			return new haxe_ds_TreeNode(null,k,v,null);
		}
		var c = this.compare(k,node.key);
		if(c == 0) {
			return new haxe_ds_TreeNode(node.left,k,v,node.right,node == null ? 0 : node._height);
		} else if(c < 0) {
			var nl = this.setLoop(k,v,node.left);
			return this.balance(nl,node.key,node.value,node.right);
		} else {
			var nr = this.setLoop(k,v,node.right);
			return this.balance(node.left,node.key,node.value,nr);
		}
	}
	,balance: function(l,k,v,r) {
		var hl = l == null ? 0 : l._height;
		var hr = r == null ? 0 : r._height;
		if(hl > hr + 2) {
			var _this = l.left;
			var _this1 = l.right;
			if((_this == null ? 0 : _this._height) >= (_this1 == null ? 0 : _this1._height)) {
				return new haxe_ds_TreeNode(l.left,l.key,l.value,new haxe_ds_TreeNode(l.right,k,v,r));
			} else {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l.left,l.key,l.value,l.right.left),l.right.key,l.right.value,new haxe_ds_TreeNode(l.right.right,k,v,r));
			}
		} else if(hr > hl + 2) {
			var _this2 = r.right;
			var _this3 = r.left;
			if((_this2 == null ? 0 : _this2._height) > (_this3 == null ? 0 : _this3._height)) {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left),r.key,r.value,r.right);
			} else {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left.left),r.left.key,r.left.value,new haxe_ds_TreeNode(r.left.right,r.key,r.value,r.right));
			}
		} else {
			return new haxe_ds_TreeNode(l,k,v,r,(hl > hr ? hl : hr) + 1);
		}
	}
	,compare: function(k1,k2) {
		return Reflect.compare(k1,k2);
	}
};
var haxe_ds_TreeNode = function(l,k,v,r,h) {
	if(h == null) {
		h = -1;
	}
	this.left = l;
	this.key = k;
	this.value = v;
	this.right = r;
	if(h == -1) {
		var tmp;
		var _this = this.left;
		var _this1 = this.right;
		if((_this == null ? 0 : _this._height) > (_this1 == null ? 0 : _this1._height)) {
			var _this2 = this.left;
			if(_this2 == null) {
				tmp = 0;
			} else {
				tmp = _this2._height;
			}
		} else {
			var _this3 = this.right;
			if(_this3 == null) {
				tmp = 0;
			} else {
				tmp = _this3._height;
			}
		}
		this._height = tmp + 1;
	} else {
		this._height = h;
	}
};
haxe_ds_TreeNode.__name__ = true;
var haxe_ds_EnumValueMap = function() {
	haxe_ds_BalancedTree.call(this);
};
haxe_ds_EnumValueMap.__name__ = true;
haxe_ds_EnumValueMap.__interfaces__ = [haxe_IMap];
haxe_ds_EnumValueMap.__super__ = haxe_ds_BalancedTree;
haxe_ds_EnumValueMap.prototype = $extend(haxe_ds_BalancedTree.prototype,{
	compare: function(k1,k2) {
		var d = k1[1] - k2[1];
		if(d != 0) {
			return d;
		}
		var p1 = k1.slice(2);
		var p2 = k2.slice(2);
		if(p1.length == 0 && p2.length == 0) {
			return 0;
		}
		return this.compareArgs(p1,p2);
	}
	,compareArgs: function(a1,a2) {
		var ld = a1.length - a2.length;
		if(ld != 0) {
			return ld;
		}
		var _g1 = 0;
		var _g = a1.length;
		while(_g1 < _g) {
			var i = _g1++;
			var d = this.compareArg(a1[i],a2[i]);
			if(d != 0) {
				return d;
			}
		}
		return 0;
	}
	,compareArg: function(v1,v2) {
		if(Reflect.isEnumValue(v1) && Reflect.isEnumValue(v2)) {
			return this.compare(v1,v2);
		} else if((v1 instanceof Array) && v1.__enum__ == null && ((v2 instanceof Array) && v2.__enum__ == null)) {
			return this.compareArgs(v1,v2);
		} else {
			return Reflect.compare(v1,v2);
		}
	}
});
var haxe_ds__$StringMap_StringMapIterator = function(map,keys) {
	this.map = map;
	this.keys = keys;
	this.index = 0;
	this.count = keys.length;
};
haxe_ds__$StringMap_StringMapIterator.__name__ = true;
haxe_ds__$StringMap_StringMapIterator.prototype = {
	hasNext: function() {
		return this.index < this.count;
	}
	,next: function() {
		var _this = this.map;
		var key = this.keys[this.index++];
		if(__map_reserved[key] != null) {
			return _this.getReserved(key);
		} else {
			return _this.h[key];
		}
	}
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
haxe_ds_StringMap.__name__ = true;
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) {
			out.push(key);
		}
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) {
				out.push(key.substr(1));
			}
			}
		}
		return out;
	}
};
var htmlcontrols_MainMenuControl = function(onLogin) {
	this.configuration = Reflect.copy(Utils.getDataStorage().MainMenu.defaultGameConfiguration);
	ReactDOM.render({ "$$typeof" : $$tre, type : htmlcontrols_mainmenu_MainMenu, props : { page : model_MainMenuDefaultValues.page, data : model_MainMenuDefaultValues.gameConfigurationsData}, key : null, ref : null},window.document.getElementById("MainMenu"));
	this.loginPanel = window.document.getElementById("loginPanel");
	this.onLogin = onLogin;
	htmlcontrols_mainmenu_MainMenuActions.startGame.add($bind(this,this.startGame));
};
htmlcontrols_MainMenuControl.__name__ = true;
htmlcontrols_MainMenuControl.prototype = {
	startGame: function(page) {
		this.configuration.teamMode = page == model_Page.TEAMS;
		this.updateDefaultValuesByInput();
		this.onLogin(this.configuration);
	}
	,updateDefaultValuesByInput: function() {
		var _g = 0;
		while(_g < 6) {
			var i = _g++;
			if(this.elementIsExist(i)) {
				this.setSlot(i);
			} else {
				break;
			}
		}
		var tmp = this.getById("mobsAmount");
		this.configuration.mobAmount = Std.parseInt(tmp);
		var tmp1 = parseFloat(this.getById("baseExp"));
		this.configuration.baseExpGain = tmp1;
		this.configuration.screenMode = this.getById("modeSwitcher");
		var tmp2 = this.getById("labelsSwitcher");
		this.configuration.showLabel = tmp2 == "ON";
	}
	,setSlot: function(i) {
		var spawnXY = Std.string(this.getById("slot" + i + "Spawn")).split(",");
		this.configuration.slots[i] = { label : this.getById("slot" + i + "Label"), charType : this.getById("slot" + i + "Class"), control : this.getById("slot" + i + "Control"), x : Std.parseInt(spawnXY[0]), y : Std.parseInt(spawnXY[1]), name : "p" + i, skin : Utils.getSkinByColor(this.getById("slot" + i + "Skin"))};
	}
	,elementIsExist: function(i) {
		return window.document.getElementById("slot" + i + "Label") != null;
	}
	,getById: function(id) {
		var htmlData = window.document.getElementById(id);
		return htmlData.value;
	}
	,setById: function(id,value) {
		var htmlData = window.document.getElementById(id);
		htmlData.value = value;
	}
	,onResize: function(windowWidth,windowHeight) {
		this.loginPanel.style.marginTop = (windowHeight - 622) / 2 + "px";
	}
	,hide: function() {
		this.loginPanel.style.display = "none";
	}
};
var htmlcontrols_SidePanelControl = function() {
	this.SidePanelData = [];
	this.sidePanel = window.document.getElementById("sidePanel");
};
htmlcontrols_SidePanelControl.__name__ = true;
htmlcontrols_SidePanelControl.prototype = {
	init: function() {
		ReactDOM.render({ "$$typeof" : $$tre, type : htmlcontrols_sidepanel_SidePanel, props : { players : model_PhaserGameModel.playersStartConfig}, key : null, ref : null},window.document.getElementById("sidePanel"));
		phasergame_PhaserGameActions.gameEnd.add($bind(this,this.onEndGame));
		this.restartButton = window.document.getElementById("restartButton");
	}
	,updateView: function() {
		var _g1 = 0;
		var _g = this.SidePanelData.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.elementIsExist("sidePanel_name" + i)) {
				this.mapDataToHTML("sidePanel_name" + i,this.SidePanelData[i].labels,i);
				this.mapProgressToHTML("sidePanel_Player" + i + "progress",this.SidePanelData[i].progress + "%");
			} else {
				break;
			}
		}
	}
	,elementIsExist: function(htmlId) {
		return window.document.getElementById(htmlId) != null;
	}
	,mapDataToHTML: function(htmlId,data,id) {
		var nameHtml = window.document.getElementById(htmlId);
		nameHtml.innerHTML = "<b>" + data + "</b>";
		if(data == "") {
			var panelHtml = window.document.getElementById("sidePanel_playerPanelId" + id);
			panelHtml.style.display = "none";
		}
	}
	,mapProgressToHTML: function(htmlId,data) {
		var progressHtml = window.document.getElementById(htmlId);
		progressHtml.style.width = data;
	}
	,updateData: function() {
		this.SidePanelData = [];
		var _this = model_PhaserGameModel.playersData;
		var data = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(data.hasNext()) {
			var data1 = data.next();
			if(model_PhaserGameModel.teamMode && data1.label.indexOf("team") >= 0) {
				this.SidePanelData.push({ labels : this.getLabelValueByPlayerData(data1), progress : this.getProgressString(data1)});
			}
			if(!model_PhaserGameModel.teamMode && data1.label.indexOf("team") == -1) {
				this.SidePanelData.push({ labels : this.getLabelValueByPlayerData(data1), progress : this.getProgressString(data1)});
			}
		}
	}
	,getLabelValueByPlayerData: function(data) {
		if(data != null) {
			return "" + data.label + " : mob slayed=" + data.slayedCounter + " lvl: " + data.currentLevel;
		} else {
			return "";
		}
	}
	,getProgressString: function(data) {
		if(data != null) {
			var progress = (data.currentLevel - 1) * 25 + (data.expGained / 5 | 0);
			return progress;
		} else {
			return 0;
		}
	}
	,sortData: function() {
		this.SidePanelData.sort(function(a,b) {
			if(a.progress < b.progress) {
				return 1;
			} else if(a.progress > b.progress) {
				return -1;
			} else {
				return 0;
			}
		});
	}
	,update: function() {
		this.updateData();
		this.sortData();
		this.updateView();
	}
	,onResize: function(windowWidth,windowHeight,multiplayer) {
		var computedStyle = window.getComputedStyle(this.sidePanel);
		var padding = Std.parseInt(computedStyle.padding);
		this.sidePanel.style.width = (windowWidth - 950 * multiplayer - padding * 2 | 0) + "px";
		this.sidePanel.style.height = (654 * multiplayer | 0) + "px";
	}
	,show: function() {
		this.sidePanel.style.display = "block";
	}
	,onEndGame: function() {
		this.restartButton.style.display = "block";
	}
};
var htmlcontrols_mainmenu_GameModes = function(props) {
	React.Component.call(this,props);
	this.state = { page : props.page};
	htmlcontrols_mainmenu_MainMenuActions.navigateToPage.add($bind(this,this.navigateToPage));
};
htmlcontrols_mainmenu_GameModes.__name__ = true;
htmlcontrols_mainmenu_GameModes.__super__ = React.Component;
htmlcontrols_mainmenu_GameModes.prototype = $extend(React.Component.prototype,{
	navigateToPage: function(page) {
		this.setState({ page : page});
	}
	,render: function() {
		return { "$$typeof" : $$tre, type : "table", props : { children : { "$$typeof" : $$tre, type : "tbody", props : { children : [{ "$$typeof" : $$tre, type : "tr", props : { children : { "$$typeof" : $$tre, type : "td", props : { children : this.showSwitcher("Local PVP",model_Page.PVP,$bind(this,this.onPVPClicked))}, key : null, ref : null}}, key : null, ref : null},{ "$$typeof" : $$tre, type : "tr", props : { children : { "$$typeof" : $$tre, type : "td", props : { children : this.showSwitcher("Player vs bots",model_Page.PVE,$bind(this,this.onPVEClicked))}, key : null, ref : null}}, key : null, ref : null},{ "$$typeof" : $$tre, type : "tr", props : { children : { "$$typeof" : $$tre, type : "td", props : { children : this.showSwitcher("TEAMS vs",model_Page.TEAMS,$bind(this,this.onTeansClicked))}, key : null, ref : null}}, key : null, ref : null},{ "$$typeof" : $$tre, type : "tr", props : { children : { "$$typeof" : $$tre, type : "td", props : { children : this.showSwitcher("HELP",model_Page.HELP,$bind(this,this.onHelpClicked))}, key : null, ref : null}}, key : null, ref : null}]}, key : null, ref : null}}, key : null, ref : null};
	}
	,showSwitcher: function(pageName,page,pageOnClick) {
		if(this.state.page != page) {
			return { "$$typeof" : $$tre, type : "button", props : { onClick : pageOnClick, className : "modeButton", children : pageName}, key : null, ref : null};
		} else {
			return { "$$typeof" : $$tre, type : "div", props : { className : "modeButtonActive", children : pageName}, key : null, ref : null};
		}
	}
	,onPVPClicked: function(evt) {
		htmlcontrols_mainmenu_MainMenuActions.navigateToPage.dispatch(model_Page.PVP);
	}
	,onPVEClicked: function(evt) {
		htmlcontrols_mainmenu_MainMenuActions.navigateToPage.dispatch(model_Page.PVE);
	}
	,onTeansClicked: function(evt) {
		htmlcontrols_mainmenu_MainMenuActions.navigateToPage.dispatch(model_Page.TEAMS);
	}
	,onHelpClicked: function(evt) {
		htmlcontrols_mainmenu_MainMenuActions.navigateToPage.dispatch(model_Page.HELP);
	}
});
var htmlcontrols_mainmenu_GamePlayOptions = function(props) {
	React.Component.call(this,props);
	this.state = { mobAmount : props.data.get(props.page).mobAmount, page : props.page};
};
htmlcontrols_mainmenu_GamePlayOptions.__name__ = true;
htmlcontrols_mainmenu_GamePlayOptions.__super__ = React.Component;
htmlcontrols_mainmenu_GamePlayOptions.prototype = $extend(React.Component.prototype,{
	render: function() {
		if(this.state.page != this.props.page) {
			this.state = { mobAmount : this.props.data.get(this.props.page).mobAmount, page : this.props.page};
		}
		return { "$$typeof" : $$tre, type : "table", props : { children : { "$$typeof" : $$tre, type : "tbody", props : { children : [{ "$$typeof" : $$tre, type : "tr", props : { children : [{ "$$typeof" : $$tre, type : "th", props : { className : "fifthWidth", children : { "$$typeof" : $$tre, type : "b", props : { children : "Mobs amount"}, key : null, ref : null}}, key : null, ref : null},{ "$$typeof" : $$tre, type : "th", props : { className : "fifthWidth", children : { "$$typeof" : $$tre, type : "b", props : { children : "Base exp gain"}, key : null, ref : null}}, key : null, ref : null},{ "$$typeof" : $$tre, type : "th", props : { className : "fifthWidth", children : { "$$typeof" : $$tre, type : "b", props : { children : "Labels"}, key : null, ref : null}}, key : null, ref : null},{ "$$typeof" : $$tre, type : "th", props : { className : "fifthWidth", children : { "$$typeof" : $$tre, type : "b", props : { children : "Screen mode"}, key : null, ref : null}}, key : null, ref : null}]}, key : null, ref : null},{ "$$typeof" : $$tre, type : "tr", props : { children : [{ "$$typeof" : $$tre, type : "td", props : { children : { "$$typeof" : $$tre, type : "input", props : { id : "mobsAmount", onChange : $bind(this,this.onChange), value : this.state.mobAmount, type : "text", placeholder : "Enter mobs amount", className : "fifthWidth"}, key : null, ref : null}}, key : null, ref : null},{ "$$typeof" : $$tre, type : "td", props : { children : { "$$typeof" : $$tre, type : "input", props : { id : "baseExp", defaultValue : "25", type : "text", placeholder : "Base exp gain", className : "fifthWidth"}, key : null, ref : null}}, key : null, ref : null},{ "$$typeof" : $$tre, type : "td", props : { children : { "$$typeof" : $$tre, type : "select", props : { id : "labelsSwitcher", className : "fifthWidth", children : [{ "$$typeof" : $$tre, type : "option", props : { value : "ON", children : "ON"}, key : null, ref : null},{ "$$typeof" : $$tre, type : "option", props : { value : "OFF", children : "OFF"}, key : null, ref : null}]}, key : null, ref : null}}, key : null, ref : null},{ "$$typeof" : $$tre, type : "td", props : { children : { "$$typeof" : $$tre, type : "select", props : { id : "modeSwitcher", className : "fifthWidth", children : [{ "$$typeof" : $$tre, type : "option", props : { value : "Fullscreen", children : "Fullscreen"}, key : null, ref : null},{ "$$typeof" : $$tre, type : "option", props : { value : "Windowed", children : "Windowed"}, key : null, ref : null}]}, key : null, ref : null}}, key : null, ref : null}]}, key : null, ref : null}]}, key : null, ref : null}}, key : null, ref : null};
	}
	,onChange: function(event) {
		var page = this.state.page;
		this.setState({ mobAmount : event.target.value, page : page});
	}
});
var msignal_Signal = function(valueClasses) {
	if(valueClasses == null) {
		valueClasses = [];
	}
	this.valueClasses = valueClasses;
	this.slots = msignal_SlotList.NIL;
	this.priorityBased = false;
};
msignal_Signal.__name__ = true;
msignal_Signal.prototype = {
	add: function(listener) {
		return this.registerListener(listener);
	}
	,addOnce: function(listener) {
		return this.registerListener(listener,true);
	}
	,addWithPriority: function(listener,priority) {
		if(priority == null) {
			priority = 0;
		}
		return this.registerListener(listener,false,priority);
	}
	,addOnceWithPriority: function(listener,priority) {
		if(priority == null) {
			priority = 0;
		}
		return this.registerListener(listener,true,priority);
	}
	,remove: function(listener) {
		var slot = this.slots.find(listener);
		if(slot == null) {
			return null;
		}
		this.slots = this.slots.filterNot(listener);
		return slot;
	}
	,removeAll: function() {
		this.slots = msignal_SlotList.NIL;
	}
	,registerListener: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		if(this.registrationPossible(listener,once)) {
			var newSlot = this.createSlot(listener,once,priority);
			if(!this.priorityBased && priority != 0) {
				this.priorityBased = true;
			}
			if(!this.priorityBased && priority == 0) {
				this.slots = this.slots.prepend(newSlot);
			} else {
				this.slots = this.slots.insertWithPriority(newSlot);
			}
			return newSlot;
		}
		return this.slots.find(listener);
	}
	,registrationPossible: function(listener,once) {
		if(!this.slots.nonEmpty) {
			return true;
		}
		var existingSlot = this.slots.find(listener);
		if(existingSlot == null) {
			return true;
		}
		return false;
	}
	,createSlot: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		return null;
	}
	,get_numListeners: function() {
		return this.slots.get_length();
	}
};
var msignal_Signal1 = function(type) {
	msignal_Signal.call(this,[type]);
};
msignal_Signal1.__name__ = true;
msignal_Signal1.__super__ = msignal_Signal;
msignal_Signal1.prototype = $extend(msignal_Signal.prototype,{
	dispatch: function(value) {
		var slotsToProcess = this.slots;
		while(slotsToProcess.nonEmpty) {
			slotsToProcess.head.execute(value);
			slotsToProcess = slotsToProcess.tail;
		}
	}
	,createSlot: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		return new msignal_Slot1(this,listener,once,priority);
	}
});
var msignal_SlotList = function(head,tail) {
	this.nonEmpty = false;
	if(head == null && tail == null) {
		this.nonEmpty = false;
	} else if(head != null) {
		this.head = head;
		this.tail = tail == null ? msignal_SlotList.NIL : tail;
		this.nonEmpty = true;
	}
};
msignal_SlotList.__name__ = true;
msignal_SlotList.prototype = {
	get_length: function() {
		if(!this.nonEmpty) {
			return 0;
		}
		if(this.tail == msignal_SlotList.NIL) {
			return 1;
		}
		var result = 0;
		var p = this;
		while(p.nonEmpty) {
			++result;
			p = p.tail;
		}
		return result;
	}
	,prepend: function(slot) {
		return new msignal_SlotList(slot,this);
	}
	,append: function(slot) {
		if(slot == null) {
			return this;
		}
		if(!this.nonEmpty) {
			return new msignal_SlotList(slot);
		}
		if(this.tail == msignal_SlotList.NIL) {
			return new msignal_SlotList(slot).prepend(this.head);
		}
		var wholeClone = new msignal_SlotList(this.head);
		var subClone = wholeClone;
		var current = this.tail;
		while(current.nonEmpty) {
			subClone = subClone.tail = new msignal_SlotList(current.head);
			current = current.tail;
		}
		subClone.tail = new msignal_SlotList(slot);
		return wholeClone;
	}
	,insertWithPriority: function(slot) {
		if(!this.nonEmpty) {
			return new msignal_SlotList(slot);
		}
		var priority = slot.priority;
		if(priority >= this.head.priority) {
			return this.prepend(slot);
		}
		var wholeClone = new msignal_SlotList(this.head);
		var subClone = wholeClone;
		var current = this.tail;
		while(current.nonEmpty) {
			if(priority > current.head.priority) {
				subClone.tail = current.prepend(slot);
				return wholeClone;
			}
			subClone = subClone.tail = new msignal_SlotList(current.head);
			current = current.tail;
		}
		subClone.tail = new msignal_SlotList(slot);
		return wholeClone;
	}
	,filterNot: function(listener) {
		if(!this.nonEmpty || listener == null) {
			return this;
		}
		if(Reflect.compareMethods(this.head.listener,listener)) {
			return this.tail;
		}
		var wholeClone = new msignal_SlotList(this.head);
		var subClone = wholeClone;
		var current = this.tail;
		while(current.nonEmpty) {
			if(Reflect.compareMethods(current.head.listener,listener)) {
				subClone.tail = current.tail;
				return wholeClone;
			}
			subClone = subClone.tail = new msignal_SlotList(current.head);
			current = current.tail;
		}
		return this;
	}
	,contains: function(listener) {
		if(!this.nonEmpty) {
			return false;
		}
		var p = this;
		while(p.nonEmpty) {
			if(Reflect.compareMethods(p.head.listener,listener)) {
				return true;
			}
			p = p.tail;
		}
		return false;
	}
	,find: function(listener) {
		if(!this.nonEmpty) {
			return null;
		}
		var p = this;
		while(p.nonEmpty) {
			if(Reflect.compareMethods(p.head.listener,listener)) {
				return p.head;
			}
			p = p.tail;
		}
		return null;
	}
};
var htmlcontrols_mainmenu_MainMenuActions = function() { };
htmlcontrols_mainmenu_MainMenuActions.__name__ = true;
var htmlcontrols_mainmenu_MainMenu = function(props) {
	React.Component.call(this,props);
	this.state = { page : props.page, configuration : props.data.get(props.page)};
	htmlcontrols_mainmenu_MainMenuActions.navigateToPage.add($bind(this,this.navigateToPage));
};
htmlcontrols_mainmenu_MainMenu.__name__ = true;
htmlcontrols_mainmenu_MainMenu.__super__ = React.Component;
htmlcontrols_mainmenu_MainMenu.prototype = $extend(React.Component.prototype,{
	navigateToPage: function(page) {
		this.setState({ page : page, configuration : this.props.data.get(page)});
	}
	,render: function() {
		return { "$$typeof" : $$tre, type : "table", props : { children : { "$$typeof" : $$tre, type : "tbody", props : { children : { "$$typeof" : $$tre, type : "tr", props : { children : [{ "$$typeof" : $$tre, type : "td", props : { className : "valignTop", children : [{ "$$typeof" : $$tre, type : "h2", props : { children : "MAIN MENU"}, key : null, ref : null},{ "$$typeof" : $$tre, type : htmlcontrols_mainmenu_GameModes, props : { page : this.props.page}, key : null, ref : null}]}, key : null, ref : null},{ "$$typeof" : $$tre, type : "td", props : { className : "mainMenuGap"}, key : null, ref : null},{ "$$typeof" : $$tre, type : "td", props : { className : "valignTop", children : [this.getOptionsByState(),this.getContentByState()]}, key : null, ref : null}]}, key : null, ref : null}}, key : null, ref : null}}, key : null, ref : null};
	}
	,getOptionsByState: function() {
		if(this.state.page == model_Page.PVP || this.state.page == model_Page.PVE || this.state.page == model_Page.TEAMS) {
			return { "$$typeof" : $$tre, type : "div", props : { children : [{ "$$typeof" : $$tre, type : "h2", props : { children : "GAME-PLAY OPTIONS"}, key : null, ref : null},{ "$$typeof" : $$tre, type : htmlcontrols_mainmenu_GamePlayOptions, props : { page : this.state.page, data : this.props.data}, key : null, ref : null}]}, key : null, ref : null};
		} else {
			return { "$$typeof" : $$tre, type : "div", props : { }, key : null, ref : null};
		}
	}
	,getContentByState: function() {
		if(this.state.page == model_Page.PVP) {
			return { "$$typeof" : $$tre, type : "div", props : { children : [{ "$$typeof" : $$tre, type : "h2", props : { children : "PVP LOBBY"}, key : null, ref : null},{ "$$typeof" : $$tre, type : htmlcontrols_mainmenu_lobby_LobbyPanel, props : { slots : this.state.configuration.slots}, key : null, ref : null},{ "$$typeof" : $$tre, type : "button", props : { id : "loginButton", onClick : $bind(this,this.onPVPClicked), children : "PLAY"}, key : null, ref : null}]}, key : null, ref : null};
		} else if(this.state.page == model_Page.PVE) {
			return { "$$typeof" : $$tre, type : "div", props : { children : [{ "$$typeof" : $$tre, type : "h2", props : { children : "PVE LOBBY"}, key : null, ref : null},{ "$$typeof" : $$tre, type : htmlcontrols_mainmenu_lobby_LobbyPanel, props : { slots : this.state.configuration.slots}, key : null, ref : null},{ "$$typeof" : $$tre, type : "button", props : { id : "loginButton", onClick : $bind(this,this.onPVEClicked), children : "PLAY"}, key : null, ref : null}]}, key : null, ref : null};
		} else if(this.state.page == model_Page.TEAMS) {
			return { "$$typeof" : $$tre, type : "div", props : { children : [{ "$$typeof" : $$tre, type : "h2", props : { children : "TEAMS LOBBY"}, key : null, ref : null},{ "$$typeof" : $$tre, type : htmlcontrols_mainmenu_lobby_LobbyPanel, props : { slots : this.state.configuration.slots}, key : null, ref : null},{ "$$typeof" : $$tre, type : "button", props : { id : "loginButton", onClick : $bind(this,this.onTEAMSClicked), children : "PLAY"}, key : null, ref : null}]}, key : null, ref : null};
		} else if(this.state.page == model_Page.HELP) {
			return { "$$typeof" : $$tre, type : "div", props : { children : [{ "$$typeof" : $$tre, type : "h2", props : { children : "HELP"}, key : null, ref : null},{ "$$typeof" : $$tre, type : htmlcontrols_mainmenu_helppage_HelpPage, props : { }, key : null, ref : null}]}, key : null, ref : null};
		} else {
			return { "$$typeof" : $$tre, type : "div", props : { children : ["404 page:",this.state.page," is not found"]}, key : null, ref : null};
		}
	}
	,onPVPClicked: function(evt) {
		htmlcontrols_mainmenu_MainMenuActions.startGame.dispatch(model_Page.PVP);
	}
	,onPVEClicked: function(evt) {
		htmlcontrols_mainmenu_MainMenuActions.startGame.dispatch(model_Page.PVE);
	}
	,onTEAMSClicked: function(evt) {
		htmlcontrols_mainmenu_MainMenuActions.startGame.dispatch(model_Page.TEAMS);
	}
});
var htmlcontrols_mainmenu_helppage_HelpPage = function(props) {
	React.Component.call(this,props);
};
htmlcontrols_mainmenu_helppage_HelpPage.__name__ = true;
htmlcontrols_mainmenu_helppage_HelpPage.__super__ = React.Component;
htmlcontrols_mainmenu_helppage_HelpPage.prototype = $extend(React.Component.prototype,{
	render: function() {
		var local = Utils.getLocalization();
		var tmp = $$tre;
		var tmp1 = $$tre;
		var tmp2 = __map_reserved["html_mainMenu_help_rulesTitle"] != null ? local.getReserved("html_mainMenu_help_rulesTitle") : local.h["html_mainMenu_help_rulesTitle"];
		var tmp3 = __map_reserved["html_mainMenu_help_rulesText"] != null ? local.getReserved("html_mainMenu_help_rulesText") : local.h["html_mainMenu_help_rulesText"];
		var tmp4 = $$tre;
		var tmp5 = __map_reserved["html_mainMenu_help_classTitle"] != null ? local.getReserved("html_mainMenu_help_classTitle") : local.h["html_mainMenu_help_classTitle"];
		var tmp6 = $$tre;
		var tmp7 = $$tre;
		var tmp8 = $$tre;
		var tmp9 = { "$$typeof" : $$tre, type : "td", props : { children : { "$$typeof" : $$tre, type : "img", props : { className : "HORSEMAN"}, key : null, ref : null}}, key : null, ref : null};
		var tmp10 = $$tre;
		var tmp11 = $$tre;
		var tmp12 = __map_reserved["general_horseman"] != null ? local.getReserved("general_horseman") : local.h["general_horseman"];
		var tmp13 = __map_reserved["html_mainMenu_help_horsemanDescription"] != null ? local.getReserved("html_mainMenu_help_horsemanDescription") : local.h["html_mainMenu_help_horsemanDescription"];
		var tmp14 = { "$$typeof" : $$tre, type : "td", props : { children : { "$$typeof" : $$tre, type : "img", props : { className : "BOWMAN"}, key : null, ref : null}}, key : null, ref : null};
		var tmp15 = $$tre;
		var tmp16 = $$tre;
		var tmp17 = __map_reserved["general_bowman"] != null ? local.getReserved("general_bowman") : local.h["general_bowman"];
		var tmp18 = __map_reserved["html_mainMenu_help_bowmanDescription"] != null ? local.getReserved("html_mainMenu_help_bowmanDescription") : local.h["html_mainMenu_help_bowmanDescription"];
		var tmp19 = $$tre;
		var tmp20 = { "$$typeof" : $$tre, type : "td", props : { children : { "$$typeof" : $$tre, type : "img", props : { className : "SWORDMAN"}, key : null, ref : null}}, key : null, ref : null};
		var tmp21 = $$tre;
		var tmp22 = $$tre;
		var tmp23 = __map_reserved["general_swordman"] != null ? local.getReserved("general_swordman") : local.h["general_swordman"];
		var tmp24 = __map_reserved["html_mainMenu_help_swordmanDescription"] != null ? local.getReserved("html_mainMenu_help_swordmanDescription") : local.h["html_mainMenu_help_swordmanDescription"];
		var tmp25 = { "$$typeof" : $$tre, type : "td", props : { children : { "$$typeof" : $$tre, type : "img", props : { className : "MAGE"}, key : null, ref : null}}, key : null, ref : null};
		var tmp26 = $$tre;
		var tmp27 = $$tre;
		var tmp28 = __map_reserved["general_mage"] != null ? local.getReserved("general_mage") : local.h["general_mage"];
		var tmp29 = __map_reserved["html_mainMenu_help_mageDescription"] != null ? local.getReserved("html_mainMenu_help_mageDescription") : local.h["html_mainMenu_help_mageDescription"];
		var tmp30 = $$tre;
		var tmp31 = { "$$typeof" : $$tre, type : "td", props : { children : { "$$typeof" : $$tre, type : "img", props : { className : "ELF"}, key : null, ref : null}}, key : null, ref : null};
		var tmp32 = $$tre;
		var tmp33 = $$tre;
		var tmp34 = __map_reserved["general_elf"] != null ? local.getReserved("general_elf") : local.h["general_elf"];
		var tmp35 = __map_reserved["html_mainMenu_help_elfDescription"] != null ? local.getReserved("html_mainMenu_help_elfDescription") : local.h["html_mainMenu_help_elfDescription"];
		var tmp36 = { "$$typeof" : $$tre, type : "td", props : { children : { "$$typeof" : $$tre, type : "img", props : { className : "ASSASSIN"}, key : null, ref : null}}, key : null, ref : null};
		var tmp37 = $$tre;
		var tmp38 = $$tre;
		var tmp39 = __map_reserved["general_assassin"] != null ? local.getReserved("general_assassin") : local.h["general_assassin"];
		var tmp40 = __map_reserved["html_mainMenu_help_assassinDescription"] != null ? local.getReserved("html_mainMenu_help_assassinDescription") : local.h["html_mainMenu_help_assassinDescription"];
		return { $$typeof : tmp, type : "div", props : { className : "helpPage", children : [{ $$typeof : tmp1, type : "h3", props : { children : tmp2}, key : null, ref : null},tmp3,{ $$typeof : tmp4, type : "h3", props : { children : tmp5}, key : null, ref : null},{ $$typeof : tmp6, type : "table", props : { children : { $$typeof : tmp7, type : "tbody", props : { children : [{ $$typeof : tmp8, type : "tr", props : { children : [tmp9,{ $$typeof : tmp10, type : "td", props : { className : "helpPageClassDescription", children : [{ $$typeof : tmp11, type : "b", props : { children : tmp12}, key : null, ref : null}," : ",tmp13]}, key : null, ref : null},tmp14,{ $$typeof : tmp15, type : "td", props : { className : "helpPageClassDescription", children : [{ $$typeof : tmp16, type : "b", props : { children : tmp17}, key : null, ref : null}," : ",tmp18]}, key : null, ref : null}]}, key : null, ref : null},{ $$typeof : tmp19, type : "tr", props : { children : [tmp20,{ $$typeof : tmp21, type : "td", props : { className : "helpPageClassDescription", children : [{ $$typeof : tmp22, type : "b", props : { children : tmp23}, key : null, ref : null}," : ",tmp24]}, key : null, ref : null},tmp25,{ $$typeof : tmp26, type : "td", props : { className : "helpPageClassDescription", children : [{ $$typeof : tmp27, type : "b", props : { children : tmp28}, key : null, ref : null}," : ",tmp29]}, key : null, ref : null}]}, key : null, ref : null},{ $$typeof : tmp30, type : "tr", props : { children : [tmp31,{ $$typeof : tmp32, type : "td", props : { className : "helpPageClassDescription", children : [{ $$typeof : tmp33, type : "b", props : { children : tmp34}, key : null, ref : null}," : ",tmp35]}, key : null, ref : null},tmp36,{ $$typeof : tmp37, type : "td", props : { className : "helpPageClassDescription", children : [{ $$typeof : tmp38, type : "b", props : { children : tmp39}, key : null, ref : null}," : ",tmp40]}, key : null, ref : null}]}, key : null, ref : null}]}, key : null, ref : null}}, key : null, ref : null}]}, key : null, ref : null};
	}
});
var htmlcontrols_mainmenu_lobby_LobbyPanel = function(props) {
	React.Component.call(this,props);
};
htmlcontrols_mainmenu_lobby_LobbyPanel.__name__ = true;
htmlcontrols_mainmenu_lobby_LobbyPanel.__super__ = React.Component;
htmlcontrols_mainmenu_lobby_LobbyPanel.prototype = $extend(React.Component.prototype,{
	render: function() {
		return { "$$typeof" : $$tre, type : "table", props : { cellPadding : "0", cellSpacing : "0", children : { "$$typeof" : $$tre, type : "tbody", props : { children : [{ "$$typeof" : $$tre, type : "tr", props : { children : [{ "$$typeof" : $$tre, type : "th", props : { className : "fifthWidth", children : { "$$typeof" : $$tre, type : "b", props : { children : "Name"}, key : null, ref : null}}, key : null, ref : null},{ "$$typeof" : $$tre, type : "th", props : { className : "fifthWidth", children : { "$$typeof" : $$tre, type : "b", props : { children : "Class"}, key : null, ref : null}}, key : null, ref : null},{ "$$typeof" : $$tre, type : "th", props : { className : "fifthWidth", children : { "$$typeof" : $$tre, type : "b", props : { children : "Control"}, key : null, ref : null}}, key : null, ref : null},{ "$$typeof" : $$tre, type : "th", props : { className : "hidden", children : { "$$typeof" : $$tre, type : "b", props : { children : "Spawn: x,y"}, key : null, ref : null}}, key : null, ref : null},{ "$$typeof" : $$tre, type : "th", props : { className : "fifthWidth", children : { "$$typeof" : $$tre, type : "b", props : { children : "Color"}, key : null, ref : null}}, key : null, ref : null}]}, key : null, ref : null},this.createChildren()]}, key : null, ref : null}}, key : null, ref : null};
	}
	,createChildren: function() {
		var _g = [];
		var _g2 = 0;
		var _g1 = this.props.slots.length;
		while(_g2 < _g1) {
			var i = _g2++;
			_g.push({ "$$typeof" : $$tre, type : "tr", props : { children : [{ "$$typeof" : $$tre, type : "td", props : { children : { "$$typeof" : $$tre, type : htmlcontrols_mainmenu_lobby_TextInput, props : { defaultValue : this.props.slots[i].label, id : this.getNameId(i), className : "fifthWidth"}, key : null, ref : null}}, key : null, ref : null},{ "$$typeof" : $$tre, type : "td", props : { children : { "$$typeof" : $$tre, type : htmlcontrols_mainmenu_lobby_SelectInput, props : { defaultValue : this.props.slots[i].charType, id : this.getClassId(i), className : "fifthWidth", options : this.getOptionsClass()}, key : null, ref : null}}, key : null, ref : null},{ "$$typeof" : $$tre, type : "td", props : { children : { "$$typeof" : $$tre, type : htmlcontrols_mainmenu_lobby_SelectInput, props : { defaultValue : this.props.slots[i].control, id : this.getControlId(i), className : "fifthWidth", options : this.getOptionsControl()}, key : null, ref : null}}, key : null, ref : null},{ "$$typeof" : $$tre, type : "td", props : { className : "hidden", children : { "$$typeof" : $$tre, type : htmlcontrols_mainmenu_lobby_TextInput, props : { defaultValue : this.getXY(i), id : this.getSpawnId(i), className : "hidden"}, key : null, ref : null}}, key : null, ref : null},{ "$$typeof" : $$tre, type : "td", props : { children : { "$$typeof" : $$tre, type : htmlcontrols_mainmenu_lobby_SelectInput, props : { defaultValue : Utils.getColorBySkin(this.props.slots[i].skin), id : this.getSkinId(i), className : "fifthWidth", options : this.getOptionsSkin()}, key : null, ref : null}}, key : null, ref : null}]}, key : null, ref : null});
		}
		return _g;
	}
	,getNameId: function(i) {
		return "slot" + i + "Label";
	}
	,getClassId: function(i) {
		return "slot" + i + "Class";
	}
	,getControlId: function(i) {
		return "slot" + i + "Control";
	}
	,getSpawnId: function(i) {
		return "slot" + i + "Spawn";
	}
	,getSkinId: function(i) {
		return "slot" + i + "Skin";
	}
	,getXY: function(i) {
		return "" + this.props.slots[i].x + "," + this.props.slots[i].y;
	}
	,getOptionsClass: function() {
		return ["horseman","bowman","elf","mage","swordman","assassin"];
	}
	,getOptionsControl: function() {
		return ["mouse","keys_awsd","keys_arrows","bot_simple","bot_hard","none"];
	}
	,getOptionsSkin: function() {
		return ["red","green","blue"];
	}
});
var htmlcontrols_mainmenu_lobby_SelectInput = function(props) {
	React.Component.call(this,props);
	this.state = { value : props.defaultValue};
};
htmlcontrols_mainmenu_lobby_SelectInput.__name__ = true;
htmlcontrols_mainmenu_lobby_SelectInput.__super__ = React.Component;
htmlcontrols_mainmenu_lobby_SelectInput.prototype = $extend(React.Component.prototype,{
	componentWillReceiveProps: function(newProps) {
		this.setState({ value : newProps.defaultValue});
	}
	,render: function() {
		return { "$$typeof" : $$tre, type : "select", props : { id : this.props.id, onChange : $bind(this,this.onChange), value : this.state.value, className : this.props.className, children : this.createOptions()}, key : null, ref : null};
	}
	,createOptions: function() {
		var _g = [];
		var _g2 = 0;
		var _g1 = this.props.options.length;
		while(_g2 < _g1) {
			var i = _g2++;
			var tmp = this.props.options[i];
			var tmp1 = this.props.options[i];
			_g.push({ "$$typeof" : $$tre, type : "option", props : { value : tmp, children : tmp1}, key : null, ref : null});
		}
		return _g;
	}
	,onChange: function(event) {
		this.setState({ value : event.target.value});
	}
});
var htmlcontrols_mainmenu_lobby_TextInput = function(props) {
	React.Component.call(this,props);
	this.state = { value : props.defaultValue};
};
htmlcontrols_mainmenu_lobby_TextInput.__name__ = true;
htmlcontrols_mainmenu_lobby_TextInput.__super__ = React.Component;
htmlcontrols_mainmenu_lobby_TextInput.prototype = $extend(React.Component.prototype,{
	componentWillReceiveProps: function(newProps) {
		this.setState({ value : newProps.defaultValue});
	}
	,render: function() {
		return { "$$typeof" : $$tre, type : "input", props : { id : this.props.id, onChange : $bind(this,this.onChange), value : this.state.value, type : "text", className : this.props.className}, key : null, ref : null};
	}
	,onChange: function(event) {
		this.setState({ value : event.target.value});
	}
});
var htmlcontrols_sidepanel_SidePanel = function(props) {
	React.Component.call(this,props);
};
htmlcontrols_sidepanel_SidePanel.__name__ = true;
htmlcontrols_sidepanel_SidePanel.__super__ = React.Component;
htmlcontrols_sidepanel_SidePanel.prototype = $extend(React.Component.prototype,{
	render: function() {
		return { "$$typeof" : $$tre, type : "div", props : { children : [this.createChildren(),{ "$$typeof" : $$tre, type : "button", props : { id : "restartButton", onClick : $bind(this,this.onRestartCicked), className : "restartButton", children : "RESTART"}, key : null, ref : null}]}, key : null, ref : null};
	}
	,createChildren: function() {
		var _g = [];
		var _g2 = 0;
		var _g1 = this.props.players.length;
		while(_g2 < _g1) {
			var i = _g2++;
			_g.push({ "$$typeof" : $$tre, type : "div", props : { id : this.getPlayerPanelId(i), children : [{ "$$typeof" : $$tre, type : "label", props : { id : this.getNameId(i), children : { "$$typeof" : $$tre, type : "b", props : { children : "Name holder"}, key : null, ref : null}}, key : null, ref : null},{ "$$typeof" : $$tre, type : "div", props : { className : "expBarBg", children : { "$$typeof" : $$tre, type : "div", props : { id : this.getProgressId(i), className : this.getProgressClass(i)}, key : null, ref : null}}, key : null, ref : null},{ "$$typeof" : $$tre, type : "br", props : { }, key : null, ref : null}]}, key : null, ref : null});
		}
		return _g;
	}
	,getPlayerPanelId: function(i) {
		return "sidePanel_playerPanelId" + i;
	}
	,getNameId: function(i) {
		return "sidePanel_name" + i;
	}
	,getProgressId: function(i) {
		return "sidePanel_Player" + i + "progress";
	}
	,getProgressClass: function(i) {
		return "Player" + i + "progress expBarBgProgress";
	}
	,onRestartCicked: function(evt) {
		var pageURL = window.location.href;
		window.location.href = pageURL;
	}
});
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
});
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
var js_Browser = function() { };
js_Browser.__name__ = true;
js_Browser.createXMLHttpRequest = function() {
	if(typeof XMLHttpRequest != "undefined") {
		return new XMLHttpRequest();
	}
	if(typeof ActiveXObject != "undefined") {
		return new ActiveXObject("Microsoft.XMLHTTP");
	}
	throw new js__$Boot_HaxeError("Unable to create XMLHttpRequest object.");
};
var model_Page = { __ename__ : true, __constructs__ : ["PVP","PVE","TEAMS","HELP"] };
model_Page.PVP = ["PVP",0];
model_Page.PVP.__enum__ = model_Page;
model_Page.PVE = ["PVE",1];
model_Page.PVE.__enum__ = model_Page;
model_Page.TEAMS = ["TEAMS",2];
model_Page.TEAMS.__enum__ = model_Page;
model_Page.HELP = ["HELP",3];
model_Page.HELP.__enum__ = model_Page;
var model_PlayerColor = function() { };
model_PlayerColor.__name__ = true;
var model_PlayerType = function() { };
model_PlayerType.__name__ = true;
var model_ControlType = function() { };
model_ControlType.__name__ = true;
var model_DefaultValues = function() { };
model_DefaultValues.__name__ = true;
var model_MainMenuDefaultValues = function() { };
model_MainMenuDefaultValues.__name__ = true;
model_MainMenuDefaultValues.init = function() {
	model_MainMenuDefaultValues.config = Utils.getDataStorage().MainMenu;
	model_MainMenuDefaultValues.spawnPoints = model_MainMenuDefaultValues.config.spawnPoints;
	var this1 = model_MainMenuDefaultValues.gameConfigurationsData;
	var v = model_MainMenuDefaultValues.getGameConfiguration(model_MainMenuDefaultValues.config.pveGameConfiguration);
	this1.set(model_Page.PVE,v);
	var this2 = model_MainMenuDefaultValues.gameConfigurationsData;
	var v1 = model_MainMenuDefaultValues.getGameConfiguration(model_MainMenuDefaultValues.config.pvpGameConfiguration);
	this2.set(model_Page.PVP,v1);
	var this3 = model_MainMenuDefaultValues.gameConfigurationsData;
	var v2 = model_MainMenuDefaultValues.getGameConfiguration(model_MainMenuDefaultValues.config.teamsGameConfiguration);
	this3.set(model_Page.TEAMS,v2);
	var this4 = model_MainMenuDefaultValues.gameConfigurationsData;
	var v3 = Reflect.copy(model_MainMenuDefaultValues.config.defaultGameConfiguration);
	this4.set(model_Page.HELP,v3);
};
model_MainMenuDefaultValues.getGameConfiguration = function(preconfig) {
	var configuration = Reflect.copy(model_MainMenuDefaultValues.config.defaultGameConfiguration);
	configuration.slots = model_MainMenuDefaultValues.getSlotArray(preconfig.slots);
	configuration.mobAmount = Std.parseInt(preconfig.mobAmount);
	return configuration;
};
model_MainMenuDefaultValues.getSlotArray = function(congigArray) {
	var slotArray = [];
	var _g = 0;
	while(_g < congigArray.length) {
		var slotConfig = congigArray[_g];
		++_g;
		slotArray.push(model_MainMenuDefaultValues.getCharStartConfig(slotConfig));
	}
	return slotArray;
};
model_MainMenuDefaultValues.getCharStartConfig = function(config) {
	var prefix = config.control != "bot_hard" && config.control != "bot_simple" ? "Player" : "Bot";
	var spawnXY = model_MainMenuDefaultValues.spawnPoints[Std.parseInt(config.spawnPointId)].split(",");
	return { charType : config.charType, x : Std.parseInt(spawnXY[0]), y : Std.parseInt(spawnXY[1]), label : "" + prefix + " " + config.slotNum, name : "p" + config.slotNum, control : config.control, skin : Std.parseInt(config.skin)};
};
var model_PhaserGameModel = function() { };
model_PhaserGameModel.__name__ = true;
model_PhaserGameModel.init = function(configuration) {
	model_PhaserGameModel.mobAmount = configuration.mobAmount;
	model_PhaserGameModel.maxLvl = 5;
	model_PhaserGameModel.baseExpGain = configuration.baseExpGain;
	model_PhaserGameModel.screenMode = configuration.screenMode;
	model_PhaserGameModel.showLabel = configuration.showLabel;
	model_PhaserGameModel.teamMode = configuration.teamMode;
	var _g = 0;
	var _g1 = configuration.slots;
	while(_g < _g1.length) {
		var slot = _g1[_g];
		++_g;
		model_PhaserGameModel.playersStartConfig.push({ label : slot.label, charType : slot.charType, control : slot.control, x : slot.x, y : slot.y, name : slot.name, skin : slot.skin});
	}
};
var msignal_Signal0 = function() {
	msignal_Signal.call(this);
};
msignal_Signal0.__name__ = true;
msignal_Signal0.__super__ = msignal_Signal;
msignal_Signal0.prototype = $extend(msignal_Signal.prototype,{
	dispatch: function() {
		var slotsToProcess = this.slots;
		while(slotsToProcess.nonEmpty) {
			slotsToProcess.head.execute();
			slotsToProcess = slotsToProcess.tail;
		}
	}
	,createSlot: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		return new msignal_Slot0(this,listener,once,priority);
	}
});
var msignal_Signal2 = function(type1,type2) {
	msignal_Signal.call(this,[type1,type2]);
};
msignal_Signal2.__name__ = true;
msignal_Signal2.__super__ = msignal_Signal;
msignal_Signal2.prototype = $extend(msignal_Signal.prototype,{
	dispatch: function(value1,value2) {
		var slotsToProcess = this.slots;
		while(slotsToProcess.nonEmpty) {
			slotsToProcess.head.execute(value1,value2);
			slotsToProcess = slotsToProcess.tail;
		}
	}
	,createSlot: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		return new msignal_Slot2(this,listener,once,priority);
	}
});
var msignal_Slot = function(signal,listener,once,priority) {
	if(priority == null) {
		priority = 0;
	}
	if(once == null) {
		once = false;
	}
	this.signal = signal;
	this.set_listener(listener);
	this.once = once;
	this.priority = priority;
	this.enabled = true;
};
msignal_Slot.__name__ = true;
msignal_Slot.prototype = {
	remove: function() {
		this.signal.remove(this.listener);
	}
	,set_listener: function(value) {
		return this.listener = value;
	}
};
var msignal_Slot0 = function(signal,listener,once,priority) {
	if(priority == null) {
		priority = 0;
	}
	if(once == null) {
		once = false;
	}
	msignal_Slot.call(this,signal,listener,once,priority);
};
msignal_Slot0.__name__ = true;
msignal_Slot0.__super__ = msignal_Slot;
msignal_Slot0.prototype = $extend(msignal_Slot.prototype,{
	execute: function() {
		if(!this.enabled) {
			return;
		}
		if(this.once) {
			this.remove();
		}
		this.listener();
	}
});
var msignal_Slot1 = function(signal,listener,once,priority) {
	if(priority == null) {
		priority = 0;
	}
	if(once == null) {
		once = false;
	}
	msignal_Slot.call(this,signal,listener,once,priority);
};
msignal_Slot1.__name__ = true;
msignal_Slot1.__super__ = msignal_Slot;
msignal_Slot1.prototype = $extend(msignal_Slot.prototype,{
	execute: function(value1) {
		if(!this.enabled) {
			return;
		}
		if(this.once) {
			this.remove();
		}
		if(this.param != null) {
			value1 = this.param;
		}
		this.listener(value1);
	}
});
var msignal_Slot2 = function(signal,listener,once,priority) {
	if(priority == null) {
		priority = 0;
	}
	if(once == null) {
		once = false;
	}
	msignal_Slot.call(this,signal,listener,once,priority);
};
msignal_Slot2.__name__ = true;
msignal_Slot2.__super__ = msignal_Slot;
msignal_Slot2.prototype = $extend(msignal_Slot.prototype,{
	execute: function(value1,value2) {
		if(!this.enabled) {
			return;
		}
		if(this.once) {
			this.remove();
		}
		if(this.param1 != null) {
			value1 = this.param1;
		}
		if(this.param2 != null) {
			value2 = this.param2;
		}
		this.listener(value1,value2);
	}
});
var Phaser_Display_Color = function() { };
Phaser_Display_Color.__name__ = true;
var phasergame_CharackterAndMobData = function(charackter,mob) {
	this.charackter = charackter;
	this.mob = mob;
};
phasergame_CharackterAndMobData.__name__ = true;
var phasergame_CollisionDetector = function(phaserScene) {
	this.phaserScene = phaserScene;
};
phasergame_CollisionDetector.__name__ = true;
phasergame_CollisionDetector.prototype = {
	init: function(allCharacktersList,allMobList) {
		this.allCharacktersList = allCharacktersList;
		this.allMobList = allMobList;
		this.initCollisionDetections();
	}
	,onCharackterAndMob: function(callback) {
		this.onCharackterAndMobCallback = callback;
	}
	,initCollisionDetections: function() {
		var _gthis = this;
		var _g = 0;
		var _g1 = this.allCharacktersList;
		while(_g < _g1.length) {
			var charackter = _g1[_g];
			++_g;
			var _g2 = 0;
			var _g3 = this.allMobList;
			while(_g2 < _g3.length) {
				var mob = _g3[_g2];
				++_g2;
				var charackterBody = charackter.getPhysicBody();
				var mobBody = mob.getPhysicBody();
				var collision = this.phaserScene.physics.add.overlap(charackterBody,mobBody,function(charackter1,mob1) {
					_gthis.onCharackterAndMobCallback(new phasergame_CharackterAndMobData(charackter1.name,mob1.name));
				},null,this);
			}
		}
	}
};
var phasergame_MoverCharacters = function() {
	this.isPause = false;
	this.onPointerpressed = false;
	this.allPlayersList = [];
	this.allMobList = [];
};
phasergame_MoverCharacters.__name__ = true;
phasergame_MoverCharacters.prototype = {
	setPause: function(pause) {
		this.isPause = pause;
	}
	,setKeys: function(keys) {
		this.keys = keys;
	}
	,setCursor: function(cursor) {
		this.cursor = cursor;
	}
	,initMobs: function(allMobList) {
		this.allMobList = allMobList;
		var _g = 0;
		while(_g < allMobList.length) {
			var currentMob = allMobList[_g];
			++_g;
			this.simpleBotModel(currentMob,1000);
		}
	}
	,initPlayers: function(allPlayersList) {
		this.allPlayersList = allPlayersList;
		var _g = 0;
		while(_g < allPlayersList.length) {
			var currentPlayer = allPlayersList[_g];
			++_g;
			var id = currentPlayer.getPhysicBody().name;
			var _this = model_PhaserGameModel.playersData;
			if((__map_reserved[id] != null ? _this.getReserved(id) : _this.h[id]).control == "bot_simple") {
				this.simpleBotModel(currentPlayer,1000);
			} else {
				var _this1 = model_PhaserGameModel.playersData;
				if((__map_reserved[id] != null ? _this1.getReserved(id) : _this1.h[id]).control == "bot_hard") {
					this.hardBotModel(currentPlayer,750);
				}
			}
		}
	}
	,simpleBotModel: function(target,delay) {
		var _gthis = this;
		var tmp = Utils.getRandomScreenX();
		var tmp1 = Utils.getRandomScreenY();
		target.setGoToXY(tmp,tmp1);
		var timer = new haxe_Timer(Std.random(delay / 2 | 0) + (delay / 2 | 0));
		timer.run = function() {
			if(!_gthis.isPause) {
				var tmp2 = Utils.getRandomScreenX();
				var tmp3 = Utils.getRandomScreenY();
				target.setGoToXY(tmp2,tmp3);
			}
		};
	}
	,hardBotModel: function(target,delay) {
		var _gthis = this;
		var closestMob = this.getClosestMob(target.getPhysicBody().x,target.getPhysicBody().y);
		var tmp = closestMob.getPhysicBody().x | 0;
		var tmp1 = closestMob.getPhysicBody().y | 0;
		target.setGoToXY(tmp,tmp1);
		var timer = new haxe_Timer(Std.random(delay / 2 | 0) + (delay / 2 | 0));
		timer.run = function() {
			if(!_gthis.isPause) {
				var closestMob1 = target.getPhysicBody().x;
				var closestMob2 = _gthis.getClosestMob(closestMob1,target.getPhysicBody().y);
				var tmp2 = closestMob2.getPhysicBody().x | 0;
				var tmp3 = closestMob2.getPhysicBody().y | 0;
				target.setGoToXY(tmp2,tmp3);
			}
		};
	}
	,getClosestMob: function(x,y) {
		var result = this.allMobList[0];
		var minDistanation = Utils.distanceBetween(x,y,result.getPhysicBody().x,result.getPhysicBody().y);
		var _g1 = 0;
		var _g = this.allMobList.length;
		while(_g1 < _g) {
			var i = _g1++;
			var mob = this.allMobList[i];
			var distanation = Utils.distanceBetween(x,y,mob.getPhysicBody().x,mob.getPhysicBody().y);
			if(distanation < minDistanation) {
				minDistanation = distanation;
				result = mob;
			}
		}
		return result;
	}
	,onPointerdown: function(pointer) {
		this.onPointerpressed = true;
		this.moveMouseTypedToPointer(pointer);
	}
	,onPointerup: function(pointer) {
		this.onPointerpressed = false;
	}
	,onPointermove: function(pointer) {
		if(this.onPointerpressed) {
			this.moveMouseTypedToPointer(pointer);
		}
	}
	,moveMouseTypedToPointer: function(pointer) {
		var _g = 0;
		var _g1 = this.allPlayersList;
		while(_g < _g1.length) {
			var currentPlayer = _g1[_g];
			++_g;
			var id = currentPlayer.getPhysicBody().name;
			var tmp;
			var _this = model_PhaserGameModel.playersData;
			if((__map_reserved[id] != null ? _this.getReserved(id) : _this.h[id]).control == "mouse") {
				tmp = !this.isPause;
			} else {
				tmp = false;
			}
			if(tmp) {
				currentPlayer.setGoToXY(pointer.x,pointer.y);
			}
		}
	}
	,update: function() {
		this.checkAWSDKeys();
		this.checkCursorKeys();
	}
	,checkAWSDKeys: function() {
		var deltaAWSDx = this.defineCursorMoveAxis(this.keys.D.isDown,this.keys.A.isDown);
		var deltaAWSDy = this.defineCursorMoveAxis(this.keys.S.isDown,this.keys.W.isDown);
		if(deltaAWSDx != 0 || deltaAWSDy != 0) {
			this.onControlKeysPressed(deltaAWSDx,deltaAWSDy,"keys_awsd");
		}
	}
	,checkCursorKeys: function() {
		var deltaCursorX = this.defineCursorMoveAxis(this.cursor.right.isDown,this.cursor.left.isDown);
		var deltaCursorY = this.defineCursorMoveAxis(this.cursor.down.isDown,this.cursor.up.isDown);
		if(deltaCursorX != 0 || deltaCursorY != 0) {
			this.onControlKeysPressed(deltaCursorX,deltaCursorY,"keys_arrows");
		}
	}
	,defineCursorMoveAxis: function(isPositive,isNegative) {
		var delta = 10;
		var axis = isPositive ? delta : 0;
		if(isNegative) {
			return -1 * delta;
		} else {
			return axis;
		}
	}
	,onControlKeysPressed: function(deltaX,deltaY,keysFlag) {
		var _g = 0;
		var _g1 = this.allPlayersList;
		while(_g < _g1.length) {
			var currentPlayer = _g1[_g];
			++_g;
			var id = currentPlayer.getPhysicBody().name;
			var tmp;
			var _this = model_PhaserGameModel.playersData;
			if((__map_reserved[id] != null ? _this.getReserved(id) : _this.h[id]).control == keysFlag) {
				tmp = !this.isPause;
			} else {
				tmp = false;
			}
			if(tmp) {
				var targetX = (currentPlayer.getPhysicBody().x | 0) + deltaX;
				var targetY = (currentPlayer.getPhysicBody().y | 0) + deltaY;
				currentPlayer.setGoToXY(targetX,targetY);
			}
		}
	}
};
var phasergame_PhaserGameActions = function() { };
phasergame_PhaserGameActions.__name__ = true;
var phasergame_PhaserGame = function() {
	this.gameCanvas = window.document.getElementById("gameCanvas");
};
phasergame_PhaserGame.__name__ = true;
phasergame_PhaserGame.prototype = {
	init: function(sidePanelControl) {
		this.scene = new phasergame_PhaserScene(sidePanelControl);
		this.game = new Phaser.Game({ width : 950, height : 654, canvas : this.gameCanvas, scene : this.scene, physics : { "default" : "arcade", "arcade" : { "debug" : false}}});
	}
	,onResize: function(windowWidth,windowHeight,multiplayer) {
		this.gameCanvas.style.height = (654 * multiplayer | 0) + "px";
		this.gameCanvas.style.width = (950 * multiplayer | 0) + "px";
		this.gameCanvas.style.position = "absolute";
		this.gameCanvas.style.left = windowWidth - 950 * multiplayer + "px";
		this.gameCanvas.style.top = (windowHeight - 654 * multiplayer) / 2 + "px";
	}
	,show: function() {
		this.gameCanvas.style.display = "block";
	}
};
var phasergame_PhaserScene = function(sidePanelControl) {
	this.isPaused = false;
	Phaser.Scene.call(this,{ });
	this.background = new phasergame_sceneobjects_Background(this);
	this.playersCollection = new phasergame_sceneobjects_PlayersCollection(this);
	this.mobsCollection = new phasergame_sceneobjects_MobsCollection(this);
	this.textLabelsCollection = new phasergame_sceneobjects_TextLabelsCollection(this);
	this.locationDetailsCollection = new phasergame_sceneobjects_LocationDetailsCollection(this);
	this.collisionDetector = new phasergame_CollisionDetector(this);
	this.moverCharacters = new phasergame_MoverCharacters();
	this.sidePanelControl = sidePanelControl;
	phasergame_PhaserGameActions.countUpFinish.add($bind(this,this.onGameStart));
};
phasergame_PhaserScene.__name__ = true;
phasergame_PhaserScene.__super__ = Phaser.Scene;
phasergame_PhaserScene.prototype = $extend(Phaser.Scene.prototype,{
	preload: function() {
		this.background.preload();
		this.playersCollection.preload();
		this.mobsCollection.preload();
		this.locationDetailsCollection.preload();
	}
	,create: function() {
		var _gthis = this;
		this.background.init();
		this.mobsCollection.init(($_=this.moverCharacters,$bind($_,$_.initMobs)));
		this.playersCollection.init(($_=this.moverCharacters,$bind($_,$_.initPlayers)));
		this.locationDetailsCollection.init();
		this.collisionDetector.init(this.playersCollection.getAllPlayersList(),this.mobsCollection.getAllMobList());
		this.collisionDetector.onCharackterAndMob($bind(this,this.onCharackterAndMobCollision));
		this.input.on("pointerdown",function(pointer) {
			_gthis.moverCharacters.onPointerdown(pointer);
		},this);
		this.input.on("pointerup",function(pointer1) {
			_gthis.moverCharacters.onPointerup(pointer1);
		},this);
		this.input.on("pointermove",function(pointer2) {
			_gthis.moverCharacters.onPointermove(pointer2);
		},this);
		this.moverCharacters.setKeys(this.input.keyboard.addKeys("A,W,S,D"));
		this.moverCharacters.setCursor(this.input.keyboard.createCursorKeys());
		this.textLabelsCollection.showCountUpMessage();
		this.physics.pause();
	}
	,update: function(time,delta) {
		if(!this.isPaused) {
			Phaser.Scene.prototype.update.call(this,time,delta);
			this.moverCharacters.update();
			this.playersCollection.update(time,delta);
			this.mobsCollection.update(time,delta);
			this.sidePanelControl.update();
			this.checkGameEndCreteria();
		}
	}
	,onCharackterAndMobCollision: function(collisionMembers) {
		if(this.mobsCollection.onMobCollision(collisionMembers.mob)) {
			var key = collisionMembers.mob;
			var _this = model_PhaserGameModel.mobsData;
			var mobLvl = (__map_reserved[key] != null ? _this.getReserved(key) : _this.h[key]).currentLevel;
			phasergame_PhaserGameActions.mobSlayed.dispatch(mobLvl);
			this.playersCollection.onPlayerSlayMob(collisionMembers.charackter,mobLvl);
		}
	}
	,checkGameEndCreteria: function() {
		var isGameEnd = model_PhaserGameModel.maxLvlInGame == model_PhaserGameModel.maxLvl;
		if(isGameEnd) {
			phasergame_PhaserGameActions.gameEnd.dispatch();
			this.textLabelsCollection.showEndGameMessage();
			this.physics.pause();
			this.moverCharacters.setPause(true);
			this.playersCollection.stopAll();
			this.mobsCollection.stopAll();
			this.isPaused = true;
		}
	}
	,onGameStart: function() {
		this.physics.resume();
	}
});
var phasergame_sceneobjects_Background = function(phaserScene) {
	this.phaserScene = phaserScene;
};
phasergame_sceneobjects_Background.__name__ = true;
phasergame_sceneobjects_Background.prototype = {
	preload: function() {
		this.phaserScene.load.image("tiles","assets/tiles.png");
		this.phaserScene.load.image("tiles_decor","assets/tiles_decor.png");
	}
	,init: function() {
		this.createTilesLayer(9,"tiles");
		this.createTilesLayer(90,"tiles_decor");
	}
	,createTilesLayer: function(randomMax,tileset) {
		var _g = [];
		var _g1 = 0;
		while(_g1 < 22) {
			var x = _g1++;
			var _g2 = [];
			var _g3 = 0;
			while(_g3 < 31) {
				var y = _g3++;
				_g2.push(Std.random(randomMax));
			}
			_g.push(_g2);
		}
		var dynamicMap = _g;
		var map = this.phaserScene.add.tilemap("dynamicMap",32,32,0,0,dynamicMap);
		var tiles = map.addTilesetImage(tileset);
		var layer = map.createStaticLayer(0,tiles,0,0);
	}
};
var phasergame_sceneobjects_LocationDetailsCollection = function(phaserScene) {
	this.phaserScene = phaserScene;
};
phasergame_sceneobjects_LocationDetailsCollection.__name__ = true;
phasergame_sceneobjects_LocationDetailsCollection.prototype = {
	preload: function() {
		var frameSize = 32;
		var frmeConfig = { frameWidth : frameSize, frameHeight : frameSize};
		this.phaserScene.load.spritesheet("objects_small","assets/objects_small.png",frmeConfig);
		this.phaserScene.load.spritesheet("objects_tree","assets/objects_tree.png",frmeConfig);
	}
	,init: function() {
		this.spawnSmallObjects();
		var _g = 0;
		var _g1 = model_DefaultValues.forestPoints;
		while(_g < _g1.length) {
			var point = _g1[_g];
			++_g;
			this.spawnForest(point[0],point[1]);
		}
	}
	,spawnSmallObjects: function() {
		var _g = 0;
		while(_g < 100) {
			var i = _g++;
			var randomX = Utils.getRandomScreenX();
			var randomY = Utils.getRandomScreenY();
			var randomDecorId = Std.random(9);
			var sprite = this.phaserScene.add.sprite(randomX,randomY,"objects_small",randomDecorId).setScale(1.25);
			sprite.depth = sprite.y;
		}
	}
	,spawnForest: function(forestX,forestY) {
		var delta = 100;
		var _g = 0;
		while(_g < 25) {
			var i = _g++;
			var spawnX = forestX + (delta / 2 - Std.random(delta) | 0);
			var spawnY = forestY + (delta / 2 - Std.random(delta) | 0);
			var sprite = this.phaserScene.add.sprite(spawnX,spawnY,"objects_tree").setScale(1.75);
			sprite.depth = sprite.y;
		}
	}
};
var phasergame_sceneobjects_MobsCollection = function(phaserScene) {
	this.allMobList = [];
	this.phaserScene = phaserScene;
};
phasergame_sceneobjects_MobsCollection.__name__ = true;
phasergame_sceneobjects_MobsCollection.prototype = {
	preload: function() {
		var mobsAssetsConfig = Utils.getDataStorage().MobsAssets;
		var frmeConfig = { frameWidth : mobsAssetsConfig.frameSize, frameHeight : mobsAssetsConfig.frameSize};
		var _g = 0;
		var _g1 = mobsAssetsConfig.assetsList;
		while(_g < _g1.length) {
			var asset = _g1[_g];
			++_g;
			this.phaserScene.load.spritesheet(asset.id,asset.url,frmeConfig);
			var k = asset.id;
			var v = mobsAssetsConfig.skins;
			var _this = model_PhaserGameModel.skinsCollection;
			if(__map_reserved[k] != null) {
				_this.setReserved(k,v);
			} else {
				_this.h[k] = v;
			}
		}
	}
	,init: function(onReadyToMove) {
		var lvlId = 0;
		var mobId = 1;
		var _g1 = 0;
		var _g = model_PhaserGameModel.mobAmount;
		while(_g1 < _g) {
			var mob = _g1++;
			var mobState = this.createMobStateByLvl(lvlId,mobId);
			var mob1 = new phasergame_sceneobjects_MovingObject(this.phaserScene,mobState);
			mob1.init();
			mob1.setSpeed(model_DefaultValues.mobSpeeds[lvlId]);
			this.allMobList.push(mob1);
			var this1 = model_PhaserGameModel.mobsData;
			var k = mob1.getPhysicBody().name;
			var v = { currentLevel : 1};
			var _this = this1;
			if(__map_reserved[k] != null) {
				_this.setReserved(k,v);
			} else {
				_this.h[k] = v;
			}
			++mobId;
		}
		onReadyToMove(this.allMobList);
	}
	,createMobStateByLvl: function(lvlId,mobId) {
		var mobX = Utils.getRandomScreenX();
		var mobY = Utils.getRandomScreenY();
		return { label : "", charType : model_DefaultValues.mobTypes[lvlId], control : "bot_simple", x : mobX, y : mobY, name : "m" + mobId, skin : 1};
	}
	,update: function(time,delta) {
		var _g = 0;
		var _g1 = this.allMobList;
		while(_g < _g1.length) {
			var currentMob = _g1[_g];
			++_g;
			currentMob.update(time,delta);
		}
	}
	,stopAll: function() {
		var _g = 0;
		var _g1 = this.allMobList;
		while(_g < _g1.length) {
			var currentMob = _g1[_g];
			++_g;
			currentMob.getPhysicBody().anims.pause();
		}
	}
	,getAllMobList: function() {
		return this.allMobList;
	}
	,onMobCollision: function(mobId) {
		var mob = this.findMobById(mobId);
		var mobSlayed = false;
		if(mob != null) {
			mobSlayed = !mob.isOnCollision();
			mob.setCollisionState($bind(this,this.respawnMob));
		}
		return mobSlayed;
	}
	,respawnMob: function(mob) {
		var lvlId = Std.random(model_PhaserGameModel.maxLvlInGame + 1);
		if(lvlId > model_DefaultValues.maxMobLvlId) {
			lvlId = model_DefaultValues.maxMobLvlId;
		} else {
			lvlId = lvlId;
		}
		var mobState = this.createMobStateByLvl(lvlId,0);
		mob.reinit(mobState);
		mob.setSpeed(model_DefaultValues.mobSpeeds[lvlId]);
		mob.setXY(Utils.getRandomScreenX(),Utils.getRandomScreenY());
		mob.setGoToXY(Utils.getRandomScreenX(),Utils.getRandomScreenY());
		mob.releaseCollisionState();
		var this1 = model_PhaserGameModel.mobsData;
		var key = mob.getPhysicBody().name;
		var _this = this1;
		(__map_reserved[key] != null ? _this.getReserved(key) : _this.h[key]).currentLevel = lvlId + 1;
	}
	,findMobById: function(mobId) {
		var _g = 0;
		var _g1 = this.allMobList;
		while(_g < _g1.length) {
			var currentMob = _g1[_g];
			++_g;
			if(currentMob.getPhysicBody().name == mobId) {
				return currentMob;
			}
		}
		return null;
	}
};
var phasergame_sceneobjects_MovingObject = function(phaserScene,state) {
	this.onCollision = false;
	this.phaserScene = phaserScene;
	this.state = state;
	this.config = Utils.getDataStorage().MovingObjectConfig;
};
phasergame_sceneobjects_MovingObject.__name__ = true;
phasergame_sceneobjects_MovingObject.prototype = {
	init: function() {
		var _g = 1;
		while(_g < 11) {
			var i = _g++;
			var key = this.getIdByLine(i);
			if(this.phaserScene.anims.get(key) == null) {
				this.phaserScene.anims.create(this.getAnimationConfig(this.state.charType,i));
			}
		}
		this.sprite = this.phaserScene.physics.add.sprite(this.state.x,this.state.y,this.state.charType).setScale(1.5);
		this.sprite.setSize(16,16);
		this.sprite.body.offset.x = 8;
		this.sprite.body.offset.y = 8;
		this.sprite.name = this.state.name;
		this.sprite.depth = this.state.y;
		this.setAnimation(this.config.IDLE_POSE_ID);
		this.setLabel(this.state.label);
	}
	,reinit: function(state) {
		this.state = state;
		var _g = 1;
		while(_g < 11) {
			var i = _g++;
			var key = this.getIdByLine(i);
			if(this.phaserScene.anims.get(key) == null) {
				this.phaserScene.anims.create(this.getAnimationConfig(state.charType,i));
			}
		}
		this.setAnimation(this.config.IDLE_POSE_ID);
		this.text.text = state.label;
		this.text.updateText();
	}
	,setCollisionState: function(animComplete) {
		var _gthis = this;
		if(!this.onCollision) {
			this.onCollision = true;
			this.phaserScene.physics.moveTo(this.sprite,this.sprite.x,this.sprite.y,0);
			this.setAnimation(this.config.COLISION_ANIM_ID,function() {
				animComplete(_gthis);
				_gthis.sprite.off("animationcomplete");
			});
		}
	}
	,releaseCollisionState: function() {
		this.onCollision = false;
	}
	,setIdle: function() {
		this.setAnimation(this.config.IDLE_POSE_ID);
	}
	,isOnCollision: function() {
		return this.onCollision;
	}
	,setLabel: function(label) {
		this.text = this.phaserScene.add.text(this.sprite.x,this.sprite.y,label);
		this.text.visible = model_PhaserGameModel.showLabel;
		this.updateTextPosition();
	}
	,setSpeed: function(speed) {
		this.currentSpeed = speed;
	}
	,setAnimation: function(lineId,animComplete) {
		var animationId = this.getIdByLine(lineId);
		if(this.sprite.anims.getCurrentKey() != animationId) {
			this.sprite.anims.load(animationId);
			if(animComplete != null) {
				this.sprite.on("animationcomplete",animComplete);
				this.sprite.anims.stopOnRepeat();
			}
			this.sprite.anims.play(animationId);
		}
	}
	,getIdByLine: function(lineId) {
		return "typeId:" + this.state.charType + "}_lineId:" + lineId + "_skin:" + this.state.skin;
	}
	,getAnimationConfig: function(typeId,lineId) {
		var result = { key : this.getIdByLine(lineId), frames : this.phaserScene.anims.generateFrameNumbers(typeId,this.getFrameConfigByLineId(lineId)), frameRate : 6, yoyo : false, repeat : -1};
		return result;
	}
	,getFrameConfigByLineId: function(lineId) {
		var key = this.state.charType;
		var _this = model_PhaserGameModel.skinsCollection;
		var maxSkins = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
		lineId = (lineId - 1) * 4 + 4 * (maxSkins - 1) * (lineId - 1) + 4 * (this.state.skin - 1);
		return this.getFrameConfig(lineId,lineId + 3);
	}
	,getFrameConfig: function(start,end) {
		var result = { start : start, end : end};
		return result;
	}
	,setGoToXY: function(x,y) {
		if(!this.onCollision) {
			var tx = x - this.sprite.x;
			var ty = y - this.sprite.y;
			var dist = Math.sqrt(tx * tx + ty * ty);
			var rad = Math.atan2(ty,tx);
			var angle = rad / Math.PI * 180;
			this.setAnimation(this.detectPosByAngle(angle));
			this.phaserScene.physics.moveTo(this.sprite,x,y,this.currentSpeed);
			this.xDestination = x;
			this.yDestination = y;
		}
	}
	,setXY: function(x,y) {
		this.sprite.x = x;
		this.sprite.y = y;
	}
	,detectPosByAngle: function(angle) {
		var result = this.config.deffaultPosition;
		angle += 180;
		var _g = 0;
		var _g1 = this.config.positionsSetup;
		while(_g < _g1.length) {
			var setup = _g1[_g];
			++_g;
			if(angle <= setup.from && angle >= setup.to) {
				result = setup.result;
				break;
			}
		}
		return result;
	}
	,update: function(time,delta) {
		this.checkDestinationReached();
		this.sprite.depth = this.sprite.y;
		this.updateTextPosition();
	}
	,updateTextPosition: function() {
		this.text.x = this.sprite.x - this.text.width / 2;
		this.text.y = this.sprite.y - this.sprite.height * 1.35;
		this.text.depth = this.sprite.y + 1;
	}
	,checkDestinationReached: function() {
		var distance = Utils.distanceBetween(this.sprite.x,this.sprite.y,this.xDestination,this.yDestination);
		if(distance < this.config.MIN_DISTANCE) {
			this.sprite.body.velocity.x = 0;
			this.sprite.body.velocity.y = 0;
			this.sprite.x = this.xDestination;
			this.sprite.y = this.yDestination;
			this.setAnimation(this.config.IDLE_POSE_ID);
		}
	}
	,getPhysicBody: function() {
		return this.sprite;
	}
};
var phasergame_sceneobjects_PlayersCollection = function(phaserScene) {
	this.allPlayersList = [];
	this.phaserScene = phaserScene;
};
phasergame_sceneobjects_PlayersCollection.__name__ = true;
phasergame_sceneobjects_PlayersCollection.prototype = {
	preload: function() {
		var playersAssetsConfig = Utils.getDataStorage().PlayersAssets;
		var frmeConfig = { frameWidth : playersAssetsConfig.frameSize, frameHeight : playersAssetsConfig.frameSize};
		var _g = 0;
		var _g1 = playersAssetsConfig.assetsList;
		while(_g < _g1.length) {
			var asset = _g1[_g];
			++_g;
			this.phaserScene.load.spritesheet(asset.id,asset.url,frmeConfig);
			var k = asset.id;
			var v = playersAssetsConfig.skins;
			var _this = model_PhaserGameModel.skinsCollection;
			if(__map_reserved[k] != null) {
				_this.setReserved(k,v);
			} else {
				_this.h[k] = v;
			}
		}
	}
	,preparePlayerByConfig: function(state) {
		var player = new phasergame_sceneobjects_MovingObject(this.phaserScene,state);
		player.init();
		this.allPlayersList.push(player);
		return player;
	}
	,init: function(onReadyToMove) {
		var _g = 0;
		while(_g < 6) {
			var i = _g++;
			var playerState = model_PhaserGameModel.playersStartConfig[i];
			if(playerState != null && playerState.control != "none") {
				var player = this.preparePlayerByConfig(playerState);
				var this1 = model_PhaserGameModel.playersData;
				var k = playerState.name;
				var v = this.getNewPlayerData(playerState.label,playerState.control,playerState.skin);
				var _this = this1;
				if(__map_reserved[k] != null) {
					_this.setReserved(k,v);
				} else {
					_this.h[k] = v;
				}
				var teamId = "team" + playerState.skin;
				var _this1 = model_PhaserGameModel.playersData;
				if((__map_reserved[teamId] != null ? _this1.getReserved(teamId) : _this1.h[teamId]) == null) {
					var this2 = model_PhaserGameModel.playersData;
					var v1 = this.getNewPlayerData(teamId,"",-1);
					var _this2 = this2;
					if(__map_reserved[teamId] != null) {
						_this2.setReserved(teamId,v1);
					} else {
						_this2.h[teamId] = v1;
					}
				}
			}
		}
		onReadyToMove(this.allPlayersList);
	}
	,getNewPlayerData: function(label,control,skin) {
		return { slayedCounter : 0, expGained : 0, currentLevel : 1, label : label, control : control, teamId : skin};
	}
	,update: function(time,delta) {
		var _g = 0;
		var _g1 = this.allPlayersList;
		while(_g < _g1.length) {
			var currentPlayer = _g1[_g];
			++_g;
			currentPlayer.update(time,delta);
		}
	}
	,stopAll: function() {
		var _g = 0;
		var _g1 = this.allPlayersList;
		while(_g < _g1.length) {
			var currentPlayer = _g1[_g];
			++_g;
			currentPlayer.getPhysicBody().anims.pause();
		}
	}
	,getAllPlayersList: function() {
		return this.allPlayersList;
	}
	,onPlayerSlayMob: function(playerId,mobLvl) {
		model_PhaserGameModel.totalMobSlayedCounter++;
		var player = this.findPlayerById(playerId);
		player.setCollisionState(function(player1) {
			player1.setIdle();
			player1.releaseCollisionState();
		});
		if(model_PhaserGameModel.teamMode) {
			var this1 = model_PhaserGameModel.playersData;
			var _this = model_PhaserGameModel.playersData;
			var key = "team" + (__map_reserved[playerId] != null ? _this.getReserved(playerId) : _this.h[playerId]).teamId;
			var _this1 = this1;
			var teamData = __map_reserved[key] != null ? _this1.getReserved(key) : _this1.h[key];
			this.updatePlayerDataOnMobSlayed(teamData,mobLvl);
		} else {
			var _this2 = model_PhaserGameModel.playersData;
			this.updatePlayerDataOnMobSlayed(__map_reserved[playerId] != null ? _this2.getReserved(playerId) : _this2.h[playerId],mobLvl);
		}
	}
	,updatePlayerDataOnMobSlayed: function(playerData,mobLvl) {
		playerData.slayedCounter++;
		playerData.expGained += model_PhaserGameModel.baseExpGain * mobLvl / playerData.currentLevel;
		if(playerData.expGained >= 100) {
			playerData.currentLevel++;
			playerData.expGained = 0;
			if(playerData.currentLevel > model_PhaserGameModel.maxLvlInGame) {
				model_PhaserGameModel.maxLvlInGame = playerData.currentLevel;
				model_PhaserGameModel.leaderPlayerLabel = playerData.label;
			}
		}
	}
	,findPlayerById: function(playerId) {
		var _g = 0;
		var _g1 = this.allPlayersList;
		while(_g < _g1.length) {
			var currentPlayer = _g1[_g];
			++_g;
			if(currentPlayer.getPhysicBody().name == playerId) {
				return currentPlayer;
			}
		}
		return null;
	}
};
var phasergame_sceneobjects_TextLabelsCollection = function(phaserScene) {
	this.smallTextStyle = { fontFamily : "Arial Black", fontSize : 46, color : "#ccd8ff"};
	this.bigTextStyle = { fontFamily : "Arial Black", fontSize : 74, color : "#ccd8ff"};
	this.countUpSmallLabels = ["1","2","3","GO!"];
	this.countUpBigLabels = ["Ready","Ready","Steady","GO!"];
	this.countUpCounter = 0;
	this.phaserScene = phaserScene;
};
phasergame_sceneobjects_TextLabelsCollection.__name__ = true;
phasergame_sceneobjects_TextLabelsCollection.prototype = {
	showCountUpMessage: function() {
		var _gthis = this;
		var countUpBig = this.createText(100,110,this.bigTextStyle);
		countUpBig.setStroke("#8ca7f7",16);
		var countUpSmall = this.createText(120,210,this.smallTextStyle);
		var timer = new haxe_Timer(1000);
		timer.run = function() {
			if(_gthis.countUpSmallLabels[_gthis.countUpCounter] != null) {
				_gthis.setTextLabel(countUpSmall,_gthis.countUpSmallLabels[_gthis.countUpCounter]);
				_gthis.setTextLabel(countUpBig,_gthis.countUpBigLabels[_gthis.countUpCounter]);
				phasergame_PhaserGameActions.countUpProgress.dispatch(_gthis.countUpCounter);
			} else {
				timer.stop();
				countUpSmall.visible = false;
				countUpBig.visible = false;
				phasergame_PhaserGameActions.countUpFinish.dispatch();
			}
			_gthis.countUpCounter++;
		};
	}
	,showEndGameMessage: function() {
		var header = this.createText(100,210,this.bigTextStyle);
		header.setStroke("#8ca7f7",16);
		this.setTextLabel(header,"Challenge is over");
		var info = this.createText(120,310,this.smallTextStyle);
		this.setTextLabel(info,"winner is: " + model_PhaserGameModel.leaderPlayerLabel);
	}
	,createText: function(x,y,style) {
		var text = this.phaserScene.add.text(x,y,"",style);
		text.setShadow(2,2,"#333333",2,true,true);
		text.depth = 100500;
		return text;
	}
	,setTextLabel: function(text,label) {
		text.text = label;
		text.updateText();
		text.x = (950 - text.width) / 2;
	}
};
var react_ReactMacro = function() { };
react_ReactMacro.__name__ = true;
var sounds_SoundPlayer = function() {
	this.sndVictory = new Howl(this.getOptionByFlieName("victory.mp3"));
	this.sndClick = new Howl(this.getOptionByFlieName("click.mp3"));
	this.sndTheme = new Howl(this.getOptionByFlieName("theme.mp3"));
	var sndAnimal = new Howl(this.getOptionByFlieName("animal.mp3"));
	var sndZombie = new Howl(this.getOptionByFlieName("zombie.mp3"));
	var sndDragon = new Howl(this.getOptionByFlieName("dragon.mp3"));
	this.hitSndList = [sndAnimal,sndZombie,sndZombie,sndDragon,sndDragon];
	var count1 = new Howl(this.getOptionByFlieName("count_1.mp3"));
	var count2 = new Howl(this.getOptionByFlieName("count_2.mp3"));
	var count3 = new Howl(this.getOptionByFlieName("count_3.mp3"));
	var countGO = new Howl(this.getOptionByFlieName("count_GO.mp3"));
	this.countUpList = [count1,count2,count3,countGO];
	htmlcontrols_mainmenu_MainMenuActions.navigateToPage.add($bind(this,this.onButtonClick));
	htmlcontrols_mainmenu_MainMenuActions.startGame.add($bind(this,this.onButtonClick));
	phasergame_PhaserGameActions.countUpFinish.add($bind(this,this.onCountUpFinish));
	phasergame_PhaserGameActions.countUpProgress.add($bind(this,this.onCountUpProgress));
	phasergame_PhaserGameActions.gameEnd.add($bind(this,this.onEndGame));
	phasergame_PhaserGameActions.mobSlayed.add($bind(this,this.onMobSlayed));
};
sounds_SoundPlayer.__name__ = true;
sounds_SoundPlayer.prototype = {
	getOptionByFlieName: function(fileName) {
		var options = { };
		options.src = ["sounds/" + fileName];
		options.autoplay = false;
		options.loop = false;
		return options;
	}
	,onButtonClick: function(page) {
		this.sndClick.play();
	}
	,onCountUpFinish: function() {
		this.sndTheme.play();
	}
	,onEndGame: function() {
		this.sndTheme.stop();
		this.sndVictory.play();
	}
	,onMobSlayed: function(mobLvl) {
		this.hitSndList[mobLvl - 1].play();
	}
	,onCountUpProgress: function(count) {
		this.countUpList[count].play();
	}
};
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
String.__name__ = true;
Array.__name__ = true;
var __map_reserved = {};
var $$tre = (typeof Symbol === "function" && Symbol.for && Symbol.for("react.element")) || 0xeac7;
msignal_SlotList.NIL = new msignal_SlotList(null,null);
Utils.localizationStorage = new haxe_ds_StringMap();
htmlcontrols_mainmenu_GameModes.displayName = "GameModes";
htmlcontrols_mainmenu_GamePlayOptions.displayName = "GamePlayOptions";
htmlcontrols_mainmenu_MainMenuActions.navigateToPage = new msignal_Signal1();
htmlcontrols_mainmenu_MainMenuActions.startGame = new msignal_Signal1();
htmlcontrols_mainmenu_MainMenu.displayName = "MainMenu";
htmlcontrols_mainmenu_helppage_HelpPage.displayName = "HelpPage";
htmlcontrols_mainmenu_lobby_LobbyPanel.displayName = "LobbyPanel";
htmlcontrols_mainmenu_lobby_SelectInput.displayName = "SelectInput";
htmlcontrols_mainmenu_lobby_TextInput.displayName = "TextInput";
htmlcontrols_sidepanel_SidePanel.displayName = "SidePanel";
model_PlayerColor.RED = "red";
model_PlayerColor.GREEN = "green";
model_PlayerColor.BLUE = "blue";
model_PlayerType.SWORDMAN = "swordman";
model_PlayerType.BOWMAN = "bowman";
model_PlayerType.ELF = "elf";
model_PlayerType.MAGE = "mage";
model_PlayerType.HORSEMAN = "horseman";
model_PlayerType.ASSASSIN = "assassin";
model_ControlType.MOUSE = "mouse";
model_ControlType.ARROWS = "keys_arrows";
model_ControlType.AWSD = "keys_awsd";
model_ControlType.BOT_SIMPLE = "bot_simple";
model_ControlType.BOT_HARD = "bot_hard";
model_ControlType.NONE = "none";
model_DefaultValues.phaserGameWidth = 950;
model_DefaultValues.phaserGameHeight = 654;
model_DefaultValues.mobTypes = ["mob1lvl","mob2lvl","mob3lvl","mob4lvl","mob5lvl"];
model_DefaultValues.mobLabels = ["lvl 1","lvl 2","lvl 3","lvl 4","lvl 5"];
model_DefaultValues.objectsSmall = "objects_small";
model_DefaultValues.objectsTree = "objects_tree";
model_DefaultValues.objectsSmallAmount = 100;
model_DefaultValues.objectsTreeAmount = 25;
model_DefaultValues.objectsTreePositionRandomizer = 100;
model_DefaultValues.forestPoints = [[100,100],[300,100],[500,100],[700,100],[100,500],[300,500],[500,500],[700,500]];
model_DefaultValues.mobSpeeds = [100,5,25,300,300];
model_DefaultValues.maxMobLvlId = 4;
model_DefaultValues.maxLvl = 5;
model_DefaultValues.botSimpleTimeoutDelay = 1000;
model_DefaultValues.botHardTimeoutDelay = 750;
model_DefaultValues.mobTimeoutDelay = 1000;
model_DefaultValues.MaxMainMenuSize = 622;
model_MainMenuDefaultValues.gameConfigurationsData = new haxe_ds_EnumValueMap();
model_MainMenuDefaultValues.page = model_Page.PVE;
model_PhaserGameModel.playersStartConfig = [];
model_PhaserGameModel.maxLvlInGame = 1;
model_PhaserGameModel.teamMode = false;
model_PhaserGameModel.totalMobSlayedCounter = 0;
model_PhaserGameModel.playersData = new haxe_ds_StringMap();
model_PhaserGameModel.mobsData = new haxe_ds_StringMap();
model_PhaserGameModel.skinsCollection = new haxe_ds_StringMap();
phasergame_PhaserGameActions.gameEnd = new msignal_Signal0();
phasergame_PhaserGameActions.countUpFinish = new msignal_Signal0();
phasergame_PhaserGameActions.countUpProgress = new msignal_Signal1();
phasergame_PhaserGameActions.mobSlayed = new msignal_Signal1();
phasergame_sceneobjects_Background.tilesetName = "tiles";
phasergame_sceneobjects_Background.tiledecorsetName = "tiles_decor";
Main.main();
})();
