// Generated by Haxe 3.4.7
(function () { "use strict";
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
var Main = function() {
	model_DefaultValues.init();
	ReactDOM.render({ "$$typeof" : $$tre, type : htmlcontrols_lobby_LobbyPanel, props : { slots : model_DefaultValues.slots}, key : null, ref : null},window.document.getElementById("lobby"));
	this.gameCanvas = window.document.getElementById("gameCanvas");
	this.sidePanel = window.document.getElementById("sidePanel");
	this.loginPanel = window.document.getElementById("loginPanel");
	this.HTML5game = window.document.getElementById("HTML5game");
	window.addEventListener("resize",$bind(this,this.onResize));
	this.onResize();
	this.sidePanelControl = new htmlcontrols_SidePanelControl();
	this.loginPanelControl = new htmlcontrols_LoginPanelControl($bind(this,this.onLogin));
	this.phaserGame = new phasergame_PhaserGame();
};
Main.__name__ = true;
Main.main = function() {
	return new Main();
};
Main.prototype = {
	onResize: function() {
		var w = window.innerWidth;
		var h = window.innerHeight;
		var multiplayer = w / 950 < h / 654 ? w / 950 : h / 654;
		this.gameCanvas.style.height = (654 * multiplayer | 0) + "px";
		this.gameCanvas.style.width = (950 * multiplayer | 0) + "px";
		this.gameCanvas.style.position = "absolute";
		this.gameCanvas.style.left = w - 950 * multiplayer + "px";
		this.gameCanvas.style.top = (h - 654 * multiplayer) / 2 + "px";
		this.sidePanel.style.width = (w - 950 * multiplayer - 32 | 0) + "px";
	}
	,onLogin: function() {
		model_Model.init();
		this.gameCanvas.style.display = "block";
		this.sidePanel.style.display = "block";
		this.loginPanel.style.display = "none";
		this.phaserGame.init(this.gameCanvas,this.sidePanelControl);
		this.phaserGame.setCallbackOnGameEnd($bind(this,this.onGameEnd));
		if(model_Model.screenMode == "Fullscreen") {
			this.HTML5game.requestFullscreen();
		}
	}
	,onGameEnd: function() {
		console.log("onGameEnd");
	}
};
Math.__name__ = true;
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && (HxOverrides.cca(x,1) == 120 || HxOverrides.cca(x,1) == 88)) {
		v = parseInt(x);
	}
	if(isNaN(v)) {
		return null;
	}
	return v;
};
Std.random = function(x) {
	if(x <= 0) {
		return 0;
	} else {
		return Math.floor(Math.random() * x);
	}
};
var Utils = function() { };
Utils.__name__ = true;
Utils.distanceBetween = function(x1,y1,x2,y2) {
	var dx = x1 - x2;
	var dy = y1 - y2;
	return Math.sqrt(dx * dx + dy * dy);
};
Utils.getRandomScreenX = function() {
	return Std.random(model_Model.phaserGameWidth);
};
Utils.getRandomScreenY = function() {
	return Std.random(model_Model.phaserGameHeight);
};
Utils.getUniqueId = function() {
	Utils.uniqueId++;
	return Std.string(Utils.uniqueId);
};
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
haxe_Timer.__name__ = true;
haxe_Timer.prototype = {
	run: function() {
	}
};
var htmlcontrols_LoginPanelControl = function(onLogin) {
	var _gthis = this;
	var button = window.document.getElementById("loginButton");
	button.onclick = function(event) {
		_gthis.updateDefaultValuesByInput();
		onLogin();
		return false;
	};
};
htmlcontrols_LoginPanelControl.__name__ = true;
htmlcontrols_LoginPanelControl.prototype = {
	updateDefaultValuesByInput: function() {
		var _g = 0;
		while(_g < 6) {
			var i = _g++;
			model_DefaultValues.slots[i].name = this.getById("slot" + i + "Name");
			model_DefaultValues.slots[i].charType = this.getById("slot" + i + "Class");
			model_DefaultValues.slots[i].controlType = this.getById("slot" + i + "Control");
			var spawnXY = Std.string(this.getById("slot" + i + "Spawn")).split(",");
			model_DefaultValues.slots[i].x = Std.parseInt(spawnXY[0]);
			model_DefaultValues.slots[i].y = Std.parseInt(spawnXY[1]);
		}
		model_DefaultValues.mobAmount = Std.parseInt(this.getById("mobsAmount"));
		model_DefaultValues.baseExpGain = parseFloat(this.getById("baseExp"));
		model_DefaultValues.maxLvl = Std.parseInt(this.getById("maxLvl"));
		model_DefaultValues.screenMode = this.getById("modeSwitcher");
		model_DefaultValues.showLabel = this.getById("labelsSwitcher") == "ON";
	}
	,getById: function(id) {
		var htmlData = window.document.getElementById(id);
		return htmlData.value;
	}
	,setById: function(id,value) {
		var htmlData = window.document.getElementById(id);
		htmlData.value = value;
	}
};
var htmlcontrols_SidePanelControl = function() {
};
htmlcontrols_SidePanelControl.__name__ = true;
htmlcontrols_SidePanelControl.prototype = {
	updateView: function() {
		this.mapDataToHTML("sidePanel_name1",model_SidePanelModel.LABEL1);
		this.mapDataToHTML("sidePanel_name2",model_SidePanelModel.LABEL2);
		this.mapDataToHTML("sidePanel_name3",model_SidePanelModel.LABEL3);
		this.mapDataToHTML("sidePanel_name4",model_SidePanelModel.LABEL4);
		this.mapDataToHTML("sidePanel_name5",model_SidePanelModel.LABEL5);
		this.mapDataToHTML("sidePanel_name6",model_SidePanelModel.LABEL6);
		this.mapProgressToHTML("sidePanel_Player1progress",this.getProgressString(model_Model.charsData[0].expGained));
		this.mapProgressToHTML("sidePanel_Player2progress",this.getProgressString(model_Model.charsData[1].expGained));
		this.mapProgressToHTML("sidePanel_Player3progress",this.getProgressString(model_Model.charsData[2].expGained));
		this.mapProgressToHTML("sidePanel_Player4progress",this.getProgressString(model_Model.charsData[3].expGained));
		this.mapProgressToHTML("sidePanel_Player5progress",this.getProgressString(model_Model.charsData[4].expGained));
		this.mapProgressToHTML("sidePanel_Player6progress",this.getProgressString(model_Model.charsData[5].expGained));
	}
	,mapDataToHTML: function(htmlId,data) {
		var nameHtml = window.document.getElementById(htmlId);
		nameHtml.innerHTML = "<b>" + data + "</b>";
	}
	,mapProgressToHTML: function(htmlId,data) {
		var progressHtml = window.document.getElementById(htmlId);
		progressHtml.style.width = data;
	}
	,getProgressString: function(current) {
		var total = 100;
		if(total == 0) {
			return "0%";
		} else {
			var result = current / total * 100;
			return result + "%";
		}
	}
	,updateData: function() {
		model_SidePanelModel.LABEL1 = "" + model_Model.charsStartConfig[0].label + " : mob slayed=" + model_Model.charsData[0].slayedCounter + " lvl: " + model_Model.charsData[0].currentLevel;
		model_SidePanelModel.LABEL2 = "" + model_Model.charsStartConfig[1].label + " : mob slayed=" + model_Model.charsData[1].slayedCounter + " lvl: " + model_Model.charsData[1].currentLevel;
		model_SidePanelModel.LABEL3 = "" + model_Model.charsStartConfig[2].label + " : mob slayed=" + model_Model.charsData[2].slayedCounter + " lvl: " + model_Model.charsData[2].currentLevel;
		model_SidePanelModel.LABEL4 = "" + model_Model.charsStartConfig[3].label + " : mob slayed=" + model_Model.charsData[3].slayedCounter + " lvl: " + model_Model.charsData[3].currentLevel;
		model_SidePanelModel.LABEL5 = "" + model_Model.charsStartConfig[4].label + " : mob slayed=" + model_Model.charsData[4].slayedCounter + " lvl: " + model_Model.charsData[4].currentLevel;
		model_SidePanelModel.LABEL6 = "" + model_Model.charsStartConfig[5].label + " : mob slayed=" + model_Model.charsData[5].slayedCounter + " lvl: " + model_Model.charsData[5].currentLevel;
	}
	,update: function() {
		this.updateData();
		this.updateView();
	}
};
var htmlcontrols_lobby_LobbyPanel = function(props) {
	React.Component.call(this,props);
};
htmlcontrols_lobby_LobbyPanel.__name__ = true;
htmlcontrols_lobby_LobbyPanel.__super__ = React.Component;
htmlcontrols_lobby_LobbyPanel.prototype = $extend(React.Component.prototype,{
	render: function() {
		return { "$$typeof" : $$tre, type : "table", props : { cellPadding : "0", cellSpacing : "0", children : { "$$typeof" : $$tre, type : "tbody", props : { children : [{ "$$typeof" : $$tre, type : "tr", props : { children : [{ "$$typeof" : $$tre, type : "th", props : { children : { "$$typeof" : $$tre, type : "b", props : { children : "Name"}, key : null, ref : null}}, key : null, ref : null},{ "$$typeof" : $$tre, type : "th", props : { children : { "$$typeof" : $$tre, type : "b", props : { children : "Class"}, key : null, ref : null}}, key : null, ref : null},{ "$$typeof" : $$tre, type : "th", props : { children : { "$$typeof" : $$tre, type : "b", props : { children : "Control"}, key : null, ref : null}}, key : null, ref : null},{ "$$typeof" : $$tre, type : "th", props : { children : { "$$typeof" : $$tre, type : "b", props : { children : "Spawn: x,y"}, key : null, ref : null}}, key : null, ref : null}]}, key : null, ref : null},this.createChildren()]}, key : null, ref : null}}, key : null, ref : null};
	}
	,createChildren: function() {
		var _g = [];
		var _g2 = 0;
		var _g1 = this.props.slots.length;
		while(_g2 < _g1) {
			var i = _g2++;
			_g.push({ "$$typeof" : $$tre, type : "tr", props : { children : [{ "$$typeof" : $$tre, type : "td", props : { children : { "$$typeof" : $$tre, type : htmlcontrols_lobby_TextInput, props : { defaultValue : this.props.slots[i].name, id : this.getNameId(i)}, key : null, ref : null}}, key : null, ref : null},{ "$$typeof" : $$tre, type : "td", props : { children : { "$$typeof" : $$tre, type : htmlcontrols_lobby_SelectInput, props : { defaultValue : this.props.slots[i].charType, id : this.getClassId(i), options : this.getOptionsClass()}, key : null, ref : null}}, key : null, ref : null},{ "$$typeof" : $$tre, type : "td", props : { children : { "$$typeof" : $$tre, type : htmlcontrols_lobby_SelectInput, props : { defaultValue : this.props.slots[i].controlType, id : this.getControlId(i), options : this.getOptionsControl()}, key : null, ref : null}}, key : null, ref : null},{ "$$typeof" : $$tre, type : "td", props : { children : { "$$typeof" : $$tre, type : htmlcontrols_lobby_TextInput, props : { defaultValue : this.getXY(i), id : this.getSpawnId(i)}, key : null, ref : null}}, key : null, ref : null}]}, key : null, ref : null});
		}
		return _g;
	}
	,getNameId: function(i) {
		return "slot" + i + "Name";
	}
	,getClassId: function(i) {
		return "slot" + i + "Class";
	}
	,getControlId: function(i) {
		return "slot" + i + "Control";
	}
	,getSpawnId: function(i) {
		return "slot" + i + "Spawn";
	}
	,getXY: function(i) {
		return "" + this.props.slots[i].x + "," + this.props.slots[i].y;
	}
	,getOptionsClass: function() {
		return [model_CharType.HORSEMAN,model_CharType.BOWMAN,model_CharType.ELF,model_CharType.MAGE,model_CharType.SWORDMAN];
	}
	,getOptionsControl: function() {
		return [model_ControlType.MOUSE,model_ControlType.WASD,model_ControlType.ARROWS,model_ControlType.BOT_SIMPLE,model_ControlType.BOT_HARD,model_ControlType.NONE];
	}
});
var htmlcontrols_lobby_SelectInput = function(props) {
	React.Component.call(this,props);
};
htmlcontrols_lobby_SelectInput.__name__ = true;
htmlcontrols_lobby_SelectInput.__super__ = React.Component;
htmlcontrols_lobby_SelectInput.prototype = $extend(React.Component.prototype,{
	render: function() {
		return { "$$typeof" : $$tre, type : "select", props : { defaultValue : this.props.defaultValue, id : this.props.id, children : this.createOptions()}, key : null, ref : null};
	}
	,createOptions: function() {
		var _g = [];
		var _g2 = 0;
		var _g1 = this.props.options.length;
		while(_g2 < _g1) {
			var i = _g2++;
			var tmp = this.props.options[i];
			var tmp1 = this.props.options[i];
			_g.push({ "$$typeof" : $$tre, type : "option", props : { value : tmp, children : tmp1}, key : null, ref : null});
		}
		return _g;
	}
});
var htmlcontrols_lobby_TextInput = function(props) {
	React.Component.call(this,props);
};
htmlcontrols_lobby_TextInput.__name__ = true;
htmlcontrols_lobby_TextInput.__super__ = React.Component;
htmlcontrols_lobby_TextInput.prototype = $extend(React.Component.prototype,{
	render: function() {
		return { "$$typeof" : $$tre, type : "input", props : { id : this.props.id, defaultValue : this.props.defaultValue, type : "text"}, key : null, ref : null};
	}
});
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
var model_DefaultValues = function() { };
model_DefaultValues.__name__ = true;
model_DefaultValues.init = function() {
	model_DefaultValues.slots.push(new model_Slot("Player 1",model_CharType.HORSEMAN,model_ControlType.MOUSE,400,300));
	model_DefaultValues.slots.push(new model_Slot("bot 1",model_CharType.SWORDMAN,model_ControlType.BOT_SIMPLE,200,300));
	model_DefaultValues.slots.push(new model_Slot("bot 2",model_CharType.SWORDMAN,model_ControlType.BOT_SIMPLE,300,300));
	model_DefaultValues.slots.push(new model_Slot("bot 3",model_CharType.SWORDMAN,model_ControlType.BOT_SIMPLE,500,300));
	model_DefaultValues.slots.push(new model_Slot("bot 4",model_CharType.SWORDMAN,model_ControlType.BOT_SIMPLE,600,300));
	model_DefaultValues.slots.push(new model_Slot("bot 5",model_CharType.SWORDMAN,model_ControlType.BOT_SIMPLE,700,300));
};
var model_Slot = function(name,charType,controlType,x,y) {
	this.name = name;
	this.controlType = controlType;
	this.charType = charType;
	this.x = x;
	this.y = y;
};
model_Slot.__name__ = true;
var model_CharacterConfig = function() {
};
model_CharacterConfig.__name__ = true;
var model_Model = function() { };
model_Model.__name__ = true;
model_Model.init = function() {
	model_Model.character.DEFAULT_POSE_ID = 7;
	model_Model.character.MOVE_SPEED = 150;
	model_Model.character.MIN_DISTANCE = 3;
	model_Model.mobAmount = model_DefaultValues.mobAmount;
	model_Model.maxLvl = model_DefaultValues.maxLvl;
	model_Model.baseExpGain = model_DefaultValues.baseExpGain;
	model_Model.screenMode = model_DefaultValues.screenMode;
	model_Model.showLabel = model_DefaultValues.showLabel;
	var _g = 0;
	while(_g < 6) {
		var i = _g++;
		model_Model.charsData.push(new model_CharData(0,0,1));
		model_Model.charsStartConfig.push(model_Model.getCharStartConfigByDefaultValues(i));
	}
};
model_Model.getCharStartConfigByDefaultValues = function(id) {
	var charType = model_DefaultValues.slots[id].charType;
	var name = model_DefaultValues.slots[id].name;
	var x = model_DefaultValues.slots[id].x;
	var y = model_DefaultValues.slots[id].y;
	return new model_CharStartConfig(charType,x,y,name);
};
var model_PhaserGameModel = function() {
};
model_PhaserGameModel.__name__ = true;
var model_CharType = function() {
};
model_CharType.__name__ = true;
var model_ControlType = function() {
};
model_ControlType.__name__ = true;
var model_MobLabel = function() {
};
model_MobLabel.__name__ = true;
var model_MobType = function() {
};
model_MobType.__name__ = true;
var model_MobSpeed = function() {
};
model_MobSpeed.__name__ = true;
var model_CharStartConfig = function(charType,x,y,label) {
	this.charType = charType;
	this.x = x;
	this.y = y;
	this.label = label;
};
model_CharStartConfig.__name__ = true;
var model_CharData = function(slayedCounter,expGained,currentLevel) {
	this.slayedCounter = slayedCounter;
	this.expGained = expGained;
	this.currentLevel = currentLevel;
};
model_CharData.__name__ = true;
var model_SidePanelModel = function() { };
model_SidePanelModel.__name__ = true;
var phasergame_CharackterAndMobData = function(charackter,mob) {
	this.charackter = charackter;
	this.mob = mob;
};
phasergame_CharackterAndMobData.__name__ = true;
var phasergame_CollisionDetector = function(phaserScene) {
	this.phaserScene = phaserScene;
};
phasergame_CollisionDetector.__name__ = true;
phasergame_CollisionDetector.prototype = {
	init: function(allCharacktersList,allMobList) {
		this.allCharacktersList = allCharacktersList;
		this.allMobList = allMobList;
		this.initCollisionDetections();
	}
	,onCharackterAndMob: function(callback) {
		this.onCharackterAndMobCallback = callback;
	}
	,initCollisionDetections: function() {
		var _gthis = this;
		var _g = 0;
		var _g1 = this.allCharacktersList;
		while(_g < _g1.length) {
			var charackter = _g1[_g];
			++_g;
			var _g2 = 0;
			var _g3 = this.allMobList;
			while(_g2 < _g3.length) {
				var mob = _g3[_g2];
				++_g2;
				var charackterBody = charackter.getPhysicBody();
				var mobBody = mob.getPhysicBody();
				var collision = this.phaserScene.physics.add.overlap(charackterBody,mobBody,function(charackter1,mob1) {
					_gthis.onCharackterAndMobCallback(new phasergame_CharackterAndMobData(charackter1.name,mob1.name));
				},null,this);
			}
		}
	}
};
var phasergame_PhaserGame = function() {
};
phasergame_PhaserGame.__name__ = true;
phasergame_PhaserGame.prototype = {
	init: function(gameCanvas,sidePanelControl) {
		this.scene = new phasergame_PhaserScene(sidePanelControl);
		this.scene.setCallbackOnGameEnd($bind(this,this.onGameEndPhaserGame));
		this.game = new Phaser.Game({ width : model_Model.phaserGameWidth, height : model_Model.phaserGameHeight, canvas : gameCanvas, scene : this.scene, physics : { "default" : "arcade", "arcade" : { "debug" : false}}});
	}
	,setCallbackOnGameEnd: function(callback) {
		this.onGameEnd = callback;
	}
	,onGameEndPhaserGame: function() {
		this.onGameEnd();
	}
};
var phasergame_PhaserScene = function(sidePanelControl) {
	this.isPaused = false;
	Phaser.Scene.call(this);
	this.background = new phasergame_sceneobjects_Background(this);
	this.characterController = new phasergame_sceneobjects_CharacterController(this);
	this.mobController = new phasergame_sceneobjects_MobController(this);
	this.collisionDetector = new phasergame_CollisionDetector(this);
	this.sidePanelControl = sidePanelControl;
};
phasergame_PhaserScene.__name__ = true;
phasergame_PhaserScene.__super__ = Phaser.Scene;
phasergame_PhaserScene.prototype = $extend(Phaser.Scene.prototype,{
	setCallbackOnGameEnd: function(callback) {
		this.onGameEnd = callback;
	}
	,preload: function() {
		this.background.preload();
		this.characterController.preload();
		this.mobController.preload();
	}
	,create: function() {
		var _gthis = this;
		this.background.init();
		this.characterController.init();
		this.mobController.init();
		this.collisionDetector.init(this.characterController.getAllCharacktersList(),this.mobController.getAllMobList());
		this.collisionDetector.onCharackterAndMob($bind(this,this.onCharackterAndMobCollision));
		this.input.on("pointerdown",function(pointer) {
			_gthis.characterController.onPointerdown(pointer);
		},this);
	}
	,update: function(time,delta) {
		if(!this.isPaused) {
			Phaser.Scene.prototype.update.call(this,time,delta);
			this.characterController.update(time,delta);
			this.mobController.update(time,delta);
			this.sidePanelControl.update();
			this.checkGameEndCreteria();
		}
	}
	,onCharackterAndMobCollision: function(dataNameId) {
		var mobLvl = 1;
		this.characterController.onCharackterSlayMob(dataNameId.charackter,mobLvl);
		this.mobController.onMobSlayed(dataNameId.mob);
	}
	,checkGameEndCreteria: function() {
		var isGameEnd = model_Model.charsData[0].currentLevel == model_Model.maxLvl || model_Model.charsData[1].currentLevel == model_Model.maxLvl || model_Model.charsData[2].currentLevel == model_Model.maxLvl || model_Model.charsData[3].currentLevel == model_Model.maxLvl || model_Model.charsData[4].currentLevel == model_Model.maxLvl || model_Model.charsData[5].currentLevel == model_Model.maxLvl;
		if(isGameEnd) {
			this.onGameEnd();
			this.physics.pause();
			this.isPaused = true;
		}
	}
});
var phasergame_sceneobjects_Background = function(phaserScene) {
	this.phaserScene = phaserScene;
	this.tilesetName = "tiles";
};
phasergame_sceneobjects_Background.__name__ = true;
phasergame_sceneobjects_Background.prototype = {
	preload: function() {
		this.phaserScene.load.image(this.tilesetName,"assets/tiles.png");
	}
	,init: function() {
		var _g = [];
		var _g1 = 0;
		while(_g1 < 22) {
			var x = _g1++;
			var _g2 = [];
			var _g3 = 0;
			while(_g3 < 31) {
				var y = _g3++;
				_g2.push(Std.random(8));
			}
			_g.push(_g2);
		}
		var dynamicMap = _g;
		var map = this.phaserScene.add.tilemap("dynamicMap",16,16,0,0,dynamicMap);
		var tiles = map.addTilesetImage(this.tilesetName);
		var layer = map.createStaticLayer(0,tiles,0,0);
		layer.scaleX = 2;
		layer.scaleY = 2;
	}
};
var phasergame_sceneobjects_Character = function(phaserScene,config) {
	this.MIN_DISTANCE = model_Model.character.MIN_DISTANCE;
	this.MOVE_SPEED = model_Model.character.MOVE_SPEED;
	this.DEFAULT_POSE_ID = model_Model.character.DEFAULT_POSE_ID;
	this.phaserScene = phaserScene;
	this.config = config;
};
phasergame_sceneobjects_Character.__name__ = true;
phasergame_sceneobjects_Character.prototype = {
	init: function() {
		var _g = 0;
		while(_g < 11) {
			var i = _g++;
			var key = this.getIdByTypeIdAndLineId(this.config.charType,i);
			if(this.phaserScene.anims.get(key) == null) {
				this.phaserScene.anims.create(this.getAnimationConfig(this.config.charType,i));
			}
		}
		this.sprite = this.phaserScene.physics.add.sprite(this.config.x,this.config.y,this.config.charType).setScale(2);
		this.sprite.name = Utils.getUniqueId();
		this.sprite.depth = this.config.y;
		this.setAnimation(this.DEFAULT_POSE_ID);
		this.setLabel(this.config.label);
	}
	,setLabel: function(label) {
		this.text = this.phaserScene.add.text(this.sprite.x,this.sprite.y,label);
		this.text.visible = model_Model.showLabel;
		this.updateTextPosition();
	}
	,setSpeed: function(speed) {
		this.MOVE_SPEED = speed;
	}
	,setAnimation: function(lineId) {
		var animationId = this.getIdByTypeIdAndLineId(this.config.charType,lineId);
		this.sprite.anims.load(animationId);
		this.sprite.anims.play(animationId);
	}
	,getIdByTypeIdAndLineId: function(typeId,lineId) {
		return "typeId:" + typeId + "_lineId:" + lineId;
	}
	,getAnimationConfig: function(typeId,lineId) {
		var result = { key : this.getIdByTypeIdAndLineId(typeId,lineId), frames : this.phaserScene.anims.generateFrameNumbers(typeId,this.getFrameConfigByLineId(lineId)), frameRate : 6, yoyo : true, repeat : -1};
		return result;
	}
	,getFrameConfigByLineId: function(lineId) {
		lineId = (lineId - 1) * 4;
		return this.getFrameConfig(lineId,lineId + 3);
	}
	,getFrameConfig: function(start,end) {
		var result = { start : start, end : end};
		return result;
	}
	,setGoToXY: function(x,y) {
		var tx = x - this.sprite.x;
		var ty = y - this.sprite.y;
		var dist = Math.sqrt(tx * tx + ty * ty);
		var rad = Math.atan2(ty,tx);
		var angle = rad / Math.PI * 180;
		this.setAnimation(this.detectPosByAngle(angle));
		this.phaserScene.physics.moveTo(this.sprite,x,y,this.MOVE_SPEED);
		this.xDestination = x;
		this.yDestination = y;
	}
	,setXY: function(x,y) {
		this.sprite.x = x;
		this.sprite.y = y;
	}
	,detectPosByAngle: function(angle) {
		var result = 3;
		angle += 180;
		if(angle <= 112 && angle >= 67) {
			result = 6;
		}
		if(angle <= 67 && angle >= 22) {
			result = 10;
		}
		if(angle <= 157 && angle >= 112) {
			result = 9;
		}
		if(angle <= 202 && angle >= 157) {
			result = 4;
		}
		if(angle <= 247 && angle >= 202) {
			result = 7;
		}
		if(angle <= 292 && angle >= 247) {
			result = 5;
		}
		if(angle <= 337 && angle >= 292) {
			result = 8;
		}
		return result;
	}
	,update: function(time,delta) {
		this.checkDestinationReached();
		this.sprite.depth = this.sprite.y;
		this.updateTextPosition();
	}
	,updateTextPosition: function() {
		this.text.x = this.sprite.x - this.text.width / 2;
		this.text.y = this.sprite.y - this.sprite.height * 1.35;
		this.text.depth = this.sprite.y + 1;
	}
	,checkDestinationReached: function() {
		var distance = Utils.distanceBetween(this.sprite.x,this.sprite.y,this.xDestination,this.yDestination);
		if(distance < this.MIN_DISTANCE) {
			this.sprite.body.velocity.x = 0;
			this.sprite.body.velocity.y = 0;
			this.sprite.x = this.xDestination;
			this.sprite.y = this.yDestination;
		}
	}
	,getPhysicBody: function() {
		return this.sprite;
	}
};
var phasergame_sceneobjects_CharacterController = function(phaserScene) {
	this.allCharacktersList = [];
	this.phaserScene = phaserScene;
};
phasergame_sceneobjects_CharacterController.__name__ = true;
phasergame_sceneobjects_CharacterController.prototype = {
	preload: function() {
		this.phaserScene.load.spritesheet(model_CharType.SWORDMAN,"assets/char_swordman.png",{ frameWidth : 32, frameHeight : 32});
		this.phaserScene.load.spritesheet(model_CharType.BOWMAN,"assets/char_bowman.png",{ frameWidth : 32, frameHeight : 32});
		this.phaserScene.load.spritesheet(model_CharType.ELF,"assets/char_elf.png",{ frameWidth : 32, frameHeight : 32});
		this.phaserScene.load.spritesheet(model_CharType.MAGE,"assets/char_mage.png",{ frameWidth : 32, frameHeight : 32});
		this.phaserScene.load.spritesheet(model_CharType.HORSEMAN,"assets/char_horseman.png",{ frameWidth : 32, frameHeight : 32});
	}
	,prepareCharackterByConfig: function(config) {
		var character = new phasergame_sceneobjects_Character(this.phaserScene,config);
		character.init();
		this.allCharacktersList.push(character);
		return character;
	}
	,init: function() {
		var _gthis = this;
		this.playerCharackter = this.prepareCharackterByConfig(model_Model.charsStartConfig[0]);
		model_Model.playerId = this.playerCharackter.getPhysicBody().name;
		var _g = 1;
		while(_g < 6) {
			var i = _g++;
			var botCharackterConfig = model_Model.charsStartConfig[i];
			var bot = this.prepareCharackterByConfig(botCharackterConfig);
			model_Model.botsId.push(bot.getPhysicBody().name);
		}
		var _g1 = 0;
		var _g11 = this.allCharacktersList;
		while(_g1 < _g11.length) {
			var currentCharackter = _g11[_g1];
			++_g1;
			if(currentCharackter != this.playerCharackter) {
				currentCharackter.setGoToXY(Utils.getRandomScreenX(),Utils.getRandomScreenY());
			}
		}
		var timer = new haxe_Timer(model_Model.botTimeoutDelay);
		timer.run = function() {
			var randomChar = _gthis.allCharacktersList[Std.random(_gthis.allCharacktersList.length)];
			if(randomChar != _gthis.playerCharackter) {
				randomChar.setGoToXY(Utils.getRandomScreenX(),Utils.getRandomScreenY());
			}
		};
	}
	,onPointerdown: function(pointer) {
		this.playerCharackter.setGoToXY(pointer.x,pointer.y);
	}
	,update: function(time,delta) {
		var _g = 0;
		var _g1 = this.allCharacktersList;
		while(_g < _g1.length) {
			var currentCharackter = _g1[_g];
			++_g;
			currentCharackter.update(time,delta);
		}
	}
	,getAllCharacktersList: function() {
		return this.allCharacktersList;
	}
	,onCharackterSlayMob: function(charId,mobLvl) {
		model_Model.totalMobSlayedCounter++;
		if(charId == model_Model.playerId) {
			this.updateCharakterDataOnMobSlayed(model_Model.charsData[0]);
		} else if(charId == model_Model.botsId[0]) {
			this.updateCharakterDataOnMobSlayed(model_Model.charsData[1]);
		} else if(charId == model_Model.botsId[1]) {
			this.updateCharakterDataOnMobSlayed(model_Model.charsData[2]);
		} else if(charId == model_Model.botsId[2]) {
			this.updateCharakterDataOnMobSlayed(model_Model.charsData[3]);
		} else if(charId == model_Model.botsId[3]) {
			this.updateCharakterDataOnMobSlayed(model_Model.charsData[4]);
		} else if(charId == model_Model.botsId[4]) {
			this.updateCharakterDataOnMobSlayed(model_Model.charsData[5]);
		}
	}
	,updateCharakterDataOnMobSlayed: function(charData) {
		charData.slayedCounter++;
		charData.expGained += model_Model.baseExpGain;
		if(charData.expGained >= 100) {
			charData.expGained = 0;
			charData.currentLevel++;
		}
	}
};
var phasergame_sceneobjects_MobController = function(phaserScene) {
	this.allMobList = [];
	this.phaserScene = phaserScene;
};
phasergame_sceneobjects_MobController.__name__ = true;
phasergame_sceneobjects_MobController.prototype = {
	preload: function() {
		this.phaserScene.load.spritesheet(model_MobType.MOB1LVL,"assets/mob1lvl.png",{ frameWidth : 32, frameHeight : 32});
		this.phaserScene.load.spritesheet(model_MobType.MOB2LVL,"assets/mob2lvl.png",{ frameWidth : 32, frameHeight : 32});
		this.phaserScene.load.spritesheet(model_MobType.MOB3LVL,"assets/mob3lvl.png",{ frameWidth : 32, frameHeight : 32});
		this.phaserScene.load.spritesheet(model_MobType.MOB4LVL,"assets/mob4lvl.png",{ frameWidth : 32, frameHeight : 32});
		this.phaserScene.load.spritesheet(model_MobType.MOB5LVL,"assets/mob5lvl.png",{ frameWidth : 32, frameHeight : 32});
	}
	,init: function() {
		var _gthis = this;
		var _g1 = 0;
		var _g = model_Model.mobAmount;
		while(_g1 < _g) {
			var mob = _g1++;
			var mobConfig = new model_CharStartConfig(model_MobType.MOB1LVL,Utils.getRandomScreenX(),Utils.getRandomScreenY(),model_MobLabel.MOB1LVL);
			var mob1 = new phasergame_sceneobjects_Character(this.phaserScene,mobConfig);
			mob1.init();
			mob1.setSpeed(model_MobSpeed.MOB1LVL);
			this.allMobList.push(mob1);
		}
		var _g2 = 0;
		var _g11 = this.allMobList;
		while(_g2 < _g11.length) {
			var currentMob = _g11[_g2];
			++_g2;
			currentMob.setGoToXY(Utils.getRandomScreenX(),Utils.getRandomScreenY());
		}
		var timer = new haxe_Timer(model_Model.mobTimeoutDelay);
		timer.run = function() {
			var randomChar = _gthis.allMobList[Std.random(_gthis.allMobList.length)];
			randomChar.setGoToXY(Utils.getRandomScreenX(),Utils.getRandomScreenY());
		};
	}
	,update: function(time,delta) {
		var _g = 0;
		var _g1 = this.allMobList;
		while(_g < _g1.length) {
			var currentMob = _g1[_g];
			++_g;
			currentMob.update(time,delta);
		}
	}
	,getAllMobList: function() {
		return this.allMobList;
	}
	,onMobSlayed: function(mobId) {
		var mob = this.findMobById(mobId);
		if(mob != null) {
			mob.setXY(Utils.getRandomScreenX(),Utils.getRandomScreenY());
			mob.setGoToXY(Utils.getRandomScreenX(),Utils.getRandomScreenY());
		}
	}
	,findMobById: function(mobId) {
		var _g = 0;
		var _g1 = this.allMobList;
		while(_g < _g1.length) {
			var currentMob = _g1[_g];
			++_g;
			if(currentMob.getPhysicBody().name == mobId) {
				return currentMob;
			}
		}
		return null;
	}
};
var react_ReactMacro = function() { };
react_ReactMacro.__name__ = true;
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
String.__name__ = true;
Array.__name__ = true;
var $$tre = (typeof Symbol === "function" && Symbol.for && Symbol.for("react.element")) || 0xeac7;
Utils.uniqueId = 0;
htmlcontrols_lobby_LobbyPanel.displayName = "LobbyPanel";
htmlcontrols_lobby_SelectInput.displayName = "SelectInput";
htmlcontrols_lobby_TextInput.displayName = "TextInput";
model_DefaultValues.slots = [];
model_DefaultValues.mobAmount = 5;
model_DefaultValues.maxLvl = 5;
model_DefaultValues.baseExpGain = 25;
model_DefaultValues.screenMode = "";
model_DefaultValues.showLabel = true;
model_Model.phaserGameWidth = 950;
model_Model.phaserGameHeight = 654;
model_Model.botTimeoutDelay = 1000;
model_Model.mobTimeoutDelay = 100;
model_Model.character = new model_CharacterConfig();
model_Model.charsStartConfig = [];
model_Model.totalMobSlayedCounter = 0;
model_Model.charsData = [];
model_Model.playerId = "";
model_Model.botsId = [];
model_CharType.SWORDMAN = "swordman";
model_CharType.BOWMAN = "bowman";
model_CharType.ELF = "elf";
model_CharType.MAGE = "mage";
model_CharType.HORSEMAN = "horseman";
model_ControlType.MOUSE = "mouse";
model_ControlType.ARROWS = "keys_arrows";
model_ControlType.WASD = "keys_awsd";
model_ControlType.BOT_SIMPLE = "bot_simple";
model_ControlType.BOT_HARD = "bot_hard";
model_ControlType.NONE = "none";
model_MobLabel.MOB1LVL = "lvl 1";
model_MobLabel.MOB2LVL = "lvl 2";
model_MobLabel.MOB3LVL = "lvl 3";
model_MobLabel.MOB4LVL = "lvl 4";
model_MobLabel.MOB5LVL = "lvl 5";
model_MobType.MOB1LVL = "mob1lvl";
model_MobType.MOB2LVL = "mob2lvl";
model_MobType.MOB3LVL = "mob3lvl";
model_MobType.MOB4LVL = "mob4lvl";
model_MobType.MOB5LVL = "mob5lvl";
model_MobSpeed.MOB1LVL = 25;
model_MobSpeed.MOB2LVL = 50;
model_MobSpeed.MOB3LVL = 100;
model_MobSpeed.MOB4LVL = 200;
model_MobSpeed.MOB5LVL = 300;
model_SidePanelModel.LABEL1 = "LABEL1";
model_SidePanelModel.LABEL2 = "LABEL2";
model_SidePanelModel.LABEL3 = "LABEL3";
model_SidePanelModel.LABEL4 = "LABEL4";
model_SidePanelModel.LABEL5 = "LABEL5";
model_SidePanelModel.LABEL6 = "LABEL6";
Main.main();
})();
