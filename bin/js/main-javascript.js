// Generated by Haxe 3.4.7
(function () { "use strict";
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
var Main = function() {
	model_DefaultValues.init();
	var data = { slotsPVP : model_DefaultValues.slotsPVP, slotsPVE : model_DefaultValues.slotsPVE, slotsTEAMS : model_DefaultValues.slotsTEAMS, page : htmlcontrols_store_GameActions.pagePVE};
	ReactDOM.render({ "$$typeof" : $$tre, type : htmlcontrols_mainmenu_MainMenu, props : { data : data}, key : null, ref : null},window.document.getElementById("MainMenu"));
	this.gameCanvas = window.document.getElementById("gameCanvas");
	this.sidePanel = window.document.getElementById("sidePanel");
	this.loginPanel = window.document.getElementById("loginPanel");
	this.HTML5game = window.document.getElementById("HTML5game");
	window.addEventListener("resize",$bind(this,this.onResize));
	this.onResize();
	this.sidePanelControl = new htmlcontrols_sidepanel_SidePanelControl();
	this.loginPanelControl = new htmlcontrols_mainmenu_MainMenuControl($bind(this,this.onLogin));
	this.phaserGame = new phasergame_PhaserGame();
};
Main.__name__ = true;
Main.main = function() {
	return new Main();
};
Main.prototype = {
	onResize: function() {
		var w = window.innerWidth;
		var h = window.innerHeight;
		var multiplayer = w / 950 < h / 654 ? w / 950 : h / 654;
		this.gameCanvas.style.height = (654 * multiplayer | 0) + "px";
		this.gameCanvas.style.width = (950 * multiplayer | 0) + "px";
		this.gameCanvas.style.position = "absolute";
		this.gameCanvas.style.left = w - 950 * multiplayer + "px";
		this.gameCanvas.style.top = (h - 654 * multiplayer) / 2 + "px";
		this.sidePanel.style.width = (w - 950 * multiplayer - 32 | 0) + "px";
	}
	,onLogin: function() {
		model_Model.init();
		ReactDOM.render({ "$$typeof" : $$tre, type : htmlcontrols_sidepanel_SidePanel, props : { players : model_Model.playersStartConfig}, key : null, ref : null},window.document.getElementById("sidePanel"));
		this.gameCanvas.style.display = "block";
		this.sidePanel.style.display = "block";
		this.loginPanel.style.display = "none";
		this.phaserGame.init(this.gameCanvas,this.sidePanelControl);
		this.phaserGame.setCallbackOnGameEnd($bind(this,this.onGameEnd));
		if(model_Model.screenMode == "Fullscreen") {
			this.HTML5game.requestFullscreen();
		}
	}
	,onGameEnd: function() {
	}
};
Math.__name__ = true;
var Reflect = function() { };
Reflect.__name__ = true;
Reflect.isFunction = function(f) {
	if(typeof(f) == "function") {
		return !(f.__name__ || f.__ename__);
	} else {
		return false;
	}
};
Reflect.compareMethods = function(f1,f2) {
	if(f1 == f2) {
		return true;
	}
	if(!Reflect.isFunction(f1) || !Reflect.isFunction(f2)) {
		return false;
	}
	if(f1.scope == f2.scope && f1.method == f2.method) {
		return f1.method != null;
	} else {
		return false;
	}
};
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && (HxOverrides.cca(x,1) == 120 || HxOverrides.cca(x,1) == 88)) {
		v = parseInt(x);
	}
	if(isNaN(v)) {
		return null;
	}
	return v;
};
Std.random = function(x) {
	if(x <= 0) {
		return 0;
	} else {
		return Math.floor(Math.random() * x);
	}
};
var Utils = function() { };
Utils.__name__ = true;
Utils.distanceBetween = function(x1,y1,x2,y2) {
	var dx = x1 - x2;
	var dy = y1 - y2;
	return Math.sqrt(dx * dx + dy * dy);
};
Utils.getRandomScreenX = function() {
	return Std.random(model_Model.phaserGameWidth);
};
Utils.getRandomScreenY = function() {
	return Std.random(model_Model.phaserGameHeight);
};
var haxe_IMap = function() { };
haxe_IMap.__name__ = true;
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
haxe_Timer.__name__ = true;
haxe_Timer.prototype = {
	run: function() {
	}
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
haxe_ds_StringMap.__name__ = true;
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
};
var htmlcontrols_mainmenu_GameModes = function(props) {
	React.Component.call(this,props);
};
htmlcontrols_mainmenu_GameModes.__name__ = true;
htmlcontrols_mainmenu_GameModes.__super__ = React.Component;
htmlcontrols_mainmenu_GameModes.prototype = $extend(React.Component.prototype,{
	render: function() {
		return { "$$typeof" : $$tre, type : "table", props : { children : { "$$typeof" : $$tre, type : "tbody", props : { children : { "$$typeof" : $$tre, type : "tr", props : { children : [{ "$$typeof" : $$tre, type : "td", props : { children : { "$$typeof" : $$tre, type : "button", props : { id : "b1", onClick : $bind(this,this.onPVPClicked), className : "modeButton", children : "Local PVP"}, key : null, ref : null}}, key : null, ref : null},{ "$$typeof" : $$tre, type : "td", props : { children : { "$$typeof" : $$tre, type : "button", props : { id : "b2", onClick : $bind(this,this.onPVEClicked), className : "modeButton", children : "Player vs bots"}, key : null, ref : null}}, key : null, ref : null},{ "$$typeof" : $$tre, type : "td", props : { children : { "$$typeof" : $$tre, type : "button", props : { id : "b3", onClick : $bind(this,this.onTeansClicked), className : "modeButton", children : "TEAMS vs"}, key : null, ref : null}}, key : null, ref : null},{ "$$typeof" : $$tre, type : "td", props : { children : { "$$typeof" : $$tre, type : "button", props : { id : "b4", onClick : $bind(this,this.onHelpClicked), className : "modeButton", children : "HELP"}, key : null, ref : null}}, key : null, ref : null}]}, key : null, ref : null}}, key : null, ref : null}}, key : null, ref : null};
	}
	,onPVPClicked: function(evt) {
		htmlcontrols_store_GameActions.navigateToPage.dispatch(htmlcontrols_store_GameActions.pagePVP);
	}
	,onPVEClicked: function(evt) {
		htmlcontrols_store_GameActions.navigateToPage.dispatch(htmlcontrols_store_GameActions.pagePVE);
	}
	,onTeansClicked: function(evt) {
		htmlcontrols_store_GameActions.navigateToPage.dispatch(htmlcontrols_store_GameActions.pageTeams);
	}
	,onHelpClicked: function(evt) {
		htmlcontrols_store_GameActions.navigateToPage.dispatch(htmlcontrols_store_GameActions.pageHelp);
	}
});
var htmlcontrols_mainmenu_GamePlayOptions = function(props) {
	React.Component.call(this,props);
};
htmlcontrols_mainmenu_GamePlayOptions.__name__ = true;
htmlcontrols_mainmenu_GamePlayOptions.__super__ = React.Component;
htmlcontrols_mainmenu_GamePlayOptions.prototype = $extend(React.Component.prototype,{
	render: function() {
		return { "$$typeof" : $$tre, type : "table", props : { children : { "$$typeof" : $$tre, type : "tbody", props : { children : [{ "$$typeof" : $$tre, type : "tr", props : { children : [{ "$$typeof" : $$tre, type : "td", props : { children : { "$$typeof" : $$tre, type : "b", props : { children : "Mobs amount"}, key : null, ref : null}}, key : null, ref : null},{ "$$typeof" : $$tre, type : "td", props : { children : { "$$typeof" : $$tre, type : "b", props : { children : "Base exp gain"}, key : null, ref : null}}, key : null, ref : null},{ "$$typeof" : $$tre, type : "td", props : { children : { "$$typeof" : $$tre, type : "b", props : { children : "Labels"}, key : null, ref : null}}, key : null, ref : null},{ "$$typeof" : $$tre, type : "td", props : { children : { "$$typeof" : $$tre, type : "b", props : { children : "Screen mode"}, key : null, ref : null}}, key : null, ref : null}]}, key : null, ref : null},{ "$$typeof" : $$tre, type : "tr", props : { children : [{ "$$typeof" : $$tre, type : "td", props : { children : { "$$typeof" : $$tre, type : "input", props : { id : "mobsAmount", defaultValue : "5", type : "text", placeholder : "Enter mobs amount", className : "quarterWidth"}, key : null, ref : null}}, key : null, ref : null},{ "$$typeof" : $$tre, type : "td", props : { children : { "$$typeof" : $$tre, type : "input", props : { id : "baseExp", defaultValue : "25", type : "text", placeholder : "Base exp gain", className : "quarterWidth"}, key : null, ref : null}}, key : null, ref : null},{ "$$typeof" : $$tre, type : "td", props : { children : { "$$typeof" : $$tre, type : "select", props : { id : "labelsSwitcher", className : "quarterWidth", children : [{ "$$typeof" : $$tre, type : "option", props : { value : "ON", children : "ON"}, key : null, ref : null},{ "$$typeof" : $$tre, type : "option", props : { value : "OFF", children : "OFF"}, key : null, ref : null}]}, key : null, ref : null}}, key : null, ref : null},{ "$$typeof" : $$tre, type : "td", props : { children : { "$$typeof" : $$tre, type : "select", props : { id : "modeSwitcher", className : "quarterWidth", children : [{ "$$typeof" : $$tre, type : "option", props : { value : "Windowed", children : "Windowed"}, key : null, ref : null},{ "$$typeof" : $$tre, type : "option", props : { value : "Fullscreen", children : "Fullscreen"}, key : null, ref : null}]}, key : null, ref : null}}, key : null, ref : null}]}, key : null, ref : null}]}, key : null, ref : null}}, key : null, ref : null};
	}
});
var htmlcontrols_mainmenu_MainMenu = function(props) {
	React.Component.call(this,props);
	this.state = { page : props.data.page, slots : this.defineSlotsForPage(props.data.page)};
	htmlcontrols_store_GameActions.navigateToPage.add($bind(this,this.navigateToPage));
};
htmlcontrols_mainmenu_MainMenu.__name__ = true;
htmlcontrols_mainmenu_MainMenu.__super__ = React.Component;
htmlcontrols_mainmenu_MainMenu.prototype = $extend(React.Component.prototype,{
	navigateToPage: function(page) {
		this.setState({ page : page, slots : this.defineSlotsForPage(page)});
	}
	,defineSlotsForPage: function(page) {
		if(page == htmlcontrols_store_GameActions.pagePVP) {
			return this.props.data.slotsPVP;
		} else if(page == htmlcontrols_store_GameActions.pagePVE) {
			return this.props.data.slotsPVE;
		} else if(page == htmlcontrols_store_GameActions.pageTeams) {
			return this.props.data.slotsTEAMS;
		} else {
			return [];
		}
	}
	,render: function() {
		return { "$$typeof" : $$tre, type : "div", props : { children : [{ "$$typeof" : $$tre, type : "h2", props : { children : "GAME-PLAY OPTIONS"}, key : null, ref : null},{ "$$typeof" : $$tre, type : htmlcontrols_mainmenu_GamePlayOptions, props : { }, key : null, ref : null},{ "$$typeof" : $$tre, type : "h2", props : { children : "MAIN MENU"}, key : null, ref : null},{ "$$typeof" : $$tre, type : htmlcontrols_mainmenu_GameModes, props : { }, key : null, ref : null},this.getContentByState()]}, key : null, ref : null};
	}
	,getContentByState: function() {
		if(this.state.page == htmlcontrols_store_GameActions.pagePVP) {
			return { "$$typeof" : $$tre, type : "div", props : { children : [{ "$$typeof" : $$tre, type : "h2", props : { children : "PVP LOBBY"}, key : null, ref : null},{ "$$typeof" : $$tre, type : htmlcontrols_mainmenu_lobby_LobbyPanel, props : { slots : this.state.slots}, key : null, ref : null},{ "$$typeof" : $$tre, type : "button", props : { id : "loginButton", onClick : $bind(this,this.onPVPClicked), children : "PLAY"}, key : null, ref : null}]}, key : null, ref : null};
		} else if(this.state.page == htmlcontrols_store_GameActions.pagePVE) {
			return { "$$typeof" : $$tre, type : "div", props : { children : [{ "$$typeof" : $$tre, type : "h2", props : { children : "PVE LOBBY"}, key : null, ref : null},{ "$$typeof" : $$tre, type : htmlcontrols_mainmenu_lobby_LobbyPanel, props : { slots : this.state.slots}, key : null, ref : null},{ "$$typeof" : $$tre, type : "button", props : { id : "loginButton", onClick : $bind(this,this.onPVEClicked), children : "PLAY"}, key : null, ref : null}]}, key : null, ref : null};
		} else if(this.state.page == htmlcontrols_store_GameActions.pageTeams) {
			return { "$$typeof" : $$tre, type : "div", props : { children : [{ "$$typeof" : $$tre, type : "h2", props : { children : "TEAMS LOBBY"}, key : null, ref : null},{ "$$typeof" : $$tre, type : htmlcontrols_mainmenu_lobby_LobbyPanel, props : { slots : this.state.slots}, key : null, ref : null},{ "$$typeof" : $$tre, type : "button", props : { id : "loginButton", onClick : $bind(this,this.onTEAMSClicked), children : "PLAY"}, key : null, ref : null}]}, key : null, ref : null};
		} else if(this.state.page == htmlcontrols_store_GameActions.pageHelp) {
			return { "$$typeof" : $$tre, type : "div", props : { children : [{ "$$typeof" : $$tre, type : "h2", props : { children : "HELP"}, key : null, ref : null},{ "$$typeof" : $$tre, type : htmlcontrols_mainmenu_helppage_HelpPage, props : { }, key : null, ref : null}]}, key : null, ref : null};
		} else {
			return { "$$typeof" : $$tre, type : "div", props : { children : ["404 page:",this.state.page," is not found"]}, key : null, ref : null};
		}
	}
	,onPVPClicked: function(evt) {
		htmlcontrols_store_GameActions.startGame.dispatch(htmlcontrols_store_GameActions.pagePVP);
	}
	,onPVEClicked: function(evt) {
		htmlcontrols_store_GameActions.startGame.dispatch(htmlcontrols_store_GameActions.pagePVE);
	}
	,onTEAMSClicked: function(evt) {
		htmlcontrols_store_GameActions.startGame.dispatch(htmlcontrols_store_GameActions.pageTeams);
	}
});
var htmlcontrols_mainmenu_MainMenuControl = function(onLogin) {
	this.onLogin = onLogin;
	htmlcontrols_store_GameActions.startGame.add($bind(this,this.startGame));
};
htmlcontrols_mainmenu_MainMenuControl.__name__ = true;
htmlcontrols_mainmenu_MainMenuControl.prototype = {
	startGame: function(page) {
		model_Model.teamMode = page == htmlcontrols_store_GameActions.pageTeams;
		this.updateDefaultValuesByInput();
		this.onLogin();
	}
	,updateDefaultValuesByInput: function() {
		var _g = 0;
		while(_g < 6) {
			var i = _g++;
			if(this.elementIsExist(i)) {
				this.setSlot(i);
			} else {
				break;
			}
		}
		model_DefaultValues.mobAmount = Std.parseInt(this.getById("mobsAmount"));
		model_DefaultValues.baseExpGain = parseFloat(this.getById("baseExp"));
		model_DefaultValues.screenMode = this.getById("modeSwitcher");
		model_DefaultValues.showLabel = this.getById("labelsSwitcher") == "ON";
	}
	,setSlot: function(i) {
		var label = this.getById("slot" + i + "Label");
		var charType = this.getById("slot" + i + "Class");
		var controlType = this.getById("slot" + i + "Control");
		var spawnXY = Std.string(this.getById("slot" + i + "Spawn")).split(",");
		var skin = this.getById("slot" + i + "Skin");
		var x = Std.parseInt(spawnXY[0]);
		var y = Std.parseInt(spawnXY[1]);
		model_DefaultValues.slots[i] = new model_Slot(label,charType,controlType,x,y,"p" + i,skin);
	}
	,elementIsExist: function(i) {
		return window.document.getElementById("slot" + i + "Label") != null;
	}
	,getById: function(id) {
		var htmlData = window.document.getElementById(id);
		return htmlData.value;
	}
	,setById: function(id,value) {
		var htmlData = window.document.getElementById(id);
		htmlData.value = value;
	}
};
var htmlcontrols_mainmenu_helppage_HelpPage = function(props) {
	React.Component.call(this,props);
};
htmlcontrols_mainmenu_helppage_HelpPage.__name__ = true;
htmlcontrols_mainmenu_helppage_HelpPage.__super__ = React.Component;
htmlcontrols_mainmenu_helppage_HelpPage.prototype = $extend(React.Component.prototype,{
	render: function() {
		return { "$$typeof" : $$tre, type : "div", props : { className : "helpPage", children : [{ "$$typeof" : $$tre, type : "h3", props : { children : "Game rules"}, key : null, ref : null},"The game itself is all about hunters challenge. There are from 2 to 6 hunters take a part in a challenge. It is could be only one winner. When hunters hunt their prey they get experience points. When hunter got 100 or more experience points he got level up. All hunters start with level 1. First who reach level 5 is the winner. All prey got level. Hunter receives more experience for the high-level prey.",{ "$$typeof" : $$tre, type : "h3", props : { children : "Classes description"}, key : null, ref : null},{ "$$typeof" : $$tre, type : "table", props : { children : { "$$typeof" : $$tre, type : "tbody", props : { children : [{ "$$typeof" : $$tre, type : "tr", props : { children : [{ "$$typeof" : $$tre, type : "td", props : { children : { "$$typeof" : $$tre, type : "img", props : { className : "HORSEMAN"}, key : null, ref : null}}, key : null, ref : null},{ "$$typeof" : $$tre, type : "td", props : { className : "helpPageClassDescription", children : [{ "$$typeof" : $$tre, type : "b", props : { children : "HORSEMAN"}, key : null, ref : null}," : The brave and the bold horseman put a heavy metal armor on his mighty muscular body."]}, key : null, ref : null},{ "$$typeof" : $$tre, type : "td", props : { children : { "$$typeof" : $$tre, type : "img", props : { className : "BOWMAN"}, key : null, ref : null}}, key : null, ref : null},{ "$$typeof" : $$tre, type : "td", props : { className : "helpPageClassDescription", children : [{ "$$typeof" : $$tre, type : "b", props : { children : "BOWMAN"}, key : null, ref : null}," : Sharp-eyed bowman like a hawks eye put all of his arrows in the exactly bull eye."]}, key : null, ref : null}]}, key : null, ref : null},{ "$$typeof" : $$tre, type : "tr", props : { children : [{ "$$typeof" : $$tre, type : "td", props : { children : { "$$typeof" : $$tre, type : "img", props : { className : "SWORDMAN"}, key : null, ref : null}}, key : null, ref : null},{ "$$typeof" : $$tre, type : "td", props : { className : "helpPageClassDescription", children : [{ "$$typeof" : $$tre, type : "b", props : { children : "SWORDMAN"}, key : null, ref : null}," : Fight master, quick-armed swordman is always ready for a quick fight."]}, key : null, ref : null},{ "$$typeof" : $$tre, type : "td", props : { children : { "$$typeof" : $$tre, type : "img", props : { className : "MAGE"}, key : null, ref : null}}, key : null, ref : null},{ "$$typeof" : $$tre, type : "td", props : { className : "helpPageClassDescription", children : [{ "$$typeof" : $$tre, type : "b", props : { children : "MAGE"}, key : null, ref : null}," : A wise and smart mage can cast a spell,  put enchant and even bring charm."]}, key : null, ref : null}]}, key : null, ref : null},{ "$$typeof" : $$tre, type : "tr", props : { children : [{ "$$typeof" : $$tre, type : "td", props : { children : { "$$typeof" : $$tre, type : "img", props : { className : "ELF"}, key : null, ref : null}}, key : null, ref : null},{ "$$typeof" : $$tre, type : "td", props : { className : "helpPageClassDescription", children : [{ "$$typeof" : $$tre, type : "b", props : { children : "ELF"}, key : null, ref : null}," : Like a mystery the elf always has secrets and they will be hidden from others before it to late to stop it."]}, key : null, ref : null},{ "$$typeof" : $$tre, type : "td", props : { }, key : null, ref : null},{ "$$typeof" : $$tre, type : "td", props : { }, key : null, ref : null}]}, key : null, ref : null}]}, key : null, ref : null}}, key : null, ref : null}]}, key : null, ref : null};
	}
});
var htmlcontrols_mainmenu_lobby_LobbyPanel = function(props) {
	React.Component.call(this,props);
};
htmlcontrols_mainmenu_lobby_LobbyPanel.__name__ = true;
htmlcontrols_mainmenu_lobby_LobbyPanel.__super__ = React.Component;
htmlcontrols_mainmenu_lobby_LobbyPanel.prototype = $extend(React.Component.prototype,{
	render: function() {
		return { "$$typeof" : $$tre, type : "table", props : { cellPadding : "0", cellSpacing : "0", children : { "$$typeof" : $$tre, type : "tbody", props : { children : [{ "$$typeof" : $$tre, type : "tr", props : { children : [{ "$$typeof" : $$tre, type : "th", props : { children : { "$$typeof" : $$tre, type : "b", props : { children : "Name"}, key : null, ref : null}}, key : null, ref : null},{ "$$typeof" : $$tre, type : "th", props : { children : { "$$typeof" : $$tre, type : "b", props : { children : "Class"}, key : null, ref : null}}, key : null, ref : null},{ "$$typeof" : $$tre, type : "th", props : { children : { "$$typeof" : $$tre, type : "b", props : { children : "Control"}, key : null, ref : null}}, key : null, ref : null},{ "$$typeof" : $$tre, type : "th", props : { children : { "$$typeof" : $$tre, type : "b", props : { children : "Spawn: x,y"}, key : null, ref : null}}, key : null, ref : null},{ "$$typeof" : $$tre, type : "th", props : { children : { "$$typeof" : $$tre, type : "b", props : { children : "Color"}, key : null, ref : null}}, key : null, ref : null}]}, key : null, ref : null},this.createChildren()]}, key : null, ref : null}}, key : null, ref : null};
	}
	,createChildren: function() {
		var _g = [];
		var _g2 = 0;
		var _g1 = this.props.slots.length;
		while(_g2 < _g1) {
			var i = _g2++;
			_g.push({ "$$typeof" : $$tre, type : "tr", props : { children : [{ "$$typeof" : $$tre, type : "td", props : { children : { "$$typeof" : $$tre, type : htmlcontrols_mainmenu_lobby_TextInput, props : { defaultValue : this.props.slots[i].label, id : this.getNameId(i)}, key : null, ref : null}}, key : null, ref : null},{ "$$typeof" : $$tre, type : "td", props : { children : { "$$typeof" : $$tre, type : htmlcontrols_mainmenu_lobby_SelectInput, props : { defaultValue : this.props.slots[i].charType, id : this.getClassId(i), options : this.getOptionsClass()}, key : null, ref : null}}, key : null, ref : null},{ "$$typeof" : $$tre, type : "td", props : { children : { "$$typeof" : $$tre, type : htmlcontrols_mainmenu_lobby_SelectInput, props : { defaultValue : this.props.slots[i].controlType, id : this.getControlId(i), options : this.getOptionsControl()}, key : null, ref : null}}, key : null, ref : null},{ "$$typeof" : $$tre, type : "td", props : { children : { "$$typeof" : $$tre, type : htmlcontrols_mainmenu_lobby_TextInput, props : { defaultValue : this.getXY(i), id : this.getSpawnId(i)}, key : null, ref : null}}, key : null, ref : null},{ "$$typeof" : $$tre, type : "td", props : { children : { "$$typeof" : $$tre, type : htmlcontrols_mainmenu_lobby_SelectInput, props : { defaultValue : this.props.slots[i].skin, id : this.getSkinId(i), options : this.getOptionsSkin()}, key : null, ref : null}}, key : null, ref : null}]}, key : null, ref : null});
		}
		return _g;
	}
	,getNameId: function(i) {
		return "slot" + i + "Label";
	}
	,getClassId: function(i) {
		return "slot" + i + "Class";
	}
	,getControlId: function(i) {
		return "slot" + i + "Control";
	}
	,getSpawnId: function(i) {
		return "slot" + i + "Spawn";
	}
	,getSkinId: function(i) {
		return "slot" + i + "Skin";
	}
	,getXY: function(i) {
		return "" + this.props.slots[i].x + "," + this.props.slots[i].y;
	}
	,getOptionsClass: function() {
		return [model_PlayerType.HORSEMAN,model_PlayerType.BOWMAN,model_PlayerType.ELF,model_PlayerType.MAGE,model_PlayerType.SWORDMAN];
	}
	,getOptionsControl: function() {
		return [model_ControlType.MOUSE,model_ControlType.AWSD,model_ControlType.ARROWS,model_ControlType.BOT_SIMPLE,model_ControlType.BOT_HARD,model_ControlType.NONE];
	}
	,getOptionsSkin: function() {
		return [model_Skin.RED,model_Skin.GREEN,model_Skin.BLUE];
	}
});
var htmlcontrols_mainmenu_lobby_SelectInput = function(props) {
	React.Component.call(this,props);
	this.state = { value : props.defaultValue};
};
htmlcontrols_mainmenu_lobby_SelectInput.__name__ = true;
htmlcontrols_mainmenu_lobby_SelectInput.__super__ = React.Component;
htmlcontrols_mainmenu_lobby_SelectInput.prototype = $extend(React.Component.prototype,{
	componentWillReceiveProps: function(newProps) {
		this.setState({ value : newProps.defaultValue});
	}
	,render: function() {
		return { "$$typeof" : $$tre, type : "select", props : { id : this.props.id, onChange : $bind(this,this.onChange), value : this.state.value, className : "fifthWidth", children : this.createOptions()}, key : null, ref : null};
	}
	,createOptions: function() {
		var _g = [];
		var _g2 = 0;
		var _g1 = this.props.options.length;
		while(_g2 < _g1) {
			var i = _g2++;
			var tmp = this.props.options[i];
			var tmp1 = this.props.options[i];
			_g.push({ "$$typeof" : $$tre, type : "option", props : { value : tmp, children : tmp1}, key : null, ref : null});
		}
		return _g;
	}
	,onChange: function(event) {
		this.setState({ value : event.target.value});
	}
});
var htmlcontrols_mainmenu_lobby_TextInput = function(props) {
	React.Component.call(this,props);
	this.state = { value : props.defaultValue};
};
htmlcontrols_mainmenu_lobby_TextInput.__name__ = true;
htmlcontrols_mainmenu_lobby_TextInput.__super__ = React.Component;
htmlcontrols_mainmenu_lobby_TextInput.prototype = $extend(React.Component.prototype,{
	componentWillReceiveProps: function(newProps) {
		this.setState({ value : newProps.defaultValue});
	}
	,render: function() {
		return { "$$typeof" : $$tre, type : "input", props : { id : this.props.id, onChange : $bind(this,this.onChange), value : this.state.value, type : "text", className : "fifthWidth"}, key : null, ref : null};
	}
	,onChange: function(event) {
		this.setState({ value : event.target.value});
	}
});
var htmlcontrols_sidepanel_SidePanel = function(props) {
	React.Component.call(this,props);
};
htmlcontrols_sidepanel_SidePanel.__name__ = true;
htmlcontrols_sidepanel_SidePanel.__super__ = React.Component;
htmlcontrols_sidepanel_SidePanel.prototype = $extend(React.Component.prototype,{
	render: function() {
		return { "$$typeof" : $$tre, type : "div", props : { children : this.createChildren()}, key : null, ref : null};
	}
	,createChildren: function() {
		var _g = [];
		var _g2 = 0;
		var _g1 = this.props.players.length;
		while(_g2 < _g1) {
			var i = _g2++;
			_g.push({ "$$typeof" : $$tre, type : "div", props : { id : this.getPlayerPanelId(i), children : [{ "$$typeof" : $$tre, type : "label", props : { id : this.getNameId(i), children : { "$$typeof" : $$tre, type : "b", props : { children : "Name holder"}, key : null, ref : null}}, key : null, ref : null},{ "$$typeof" : $$tre, type : "div", props : { className : "expBarBg", children : { "$$typeof" : $$tre, type : "div", props : { id : this.getProgressId(i), className : this.getProgressClass(i)}, key : null, ref : null}}, key : null, ref : null},{ "$$typeof" : $$tre, type : "br", props : { }, key : null, ref : null}]}, key : null, ref : null});
		}
		return _g;
	}
	,getPlayerPanelId: function(i) {
		return "sidePanel_playerPanelId" + i;
	}
	,getNameId: function(i) {
		return "sidePanel_name" + i;
	}
	,getProgressId: function(i) {
		return "sidePanel_Player" + i + "progress";
	}
	,getProgressClass: function(i) {
		return "Player" + i + "progress expBarBgProgress";
	}
});
var htmlcontrols_sidepanel_SidePanelControl = function() {
	this.SidePanelProgress = [];
	this.SidePanelLabels = [];
};
htmlcontrols_sidepanel_SidePanelControl.__name__ = true;
htmlcontrols_sidepanel_SidePanelControl.prototype = {
	updateView: function() {
		var _g = 0;
		while(_g < 6) {
			var i = _g++;
			if(this.elementIsExist("sidePanel_name" + i)) {
				this.mapDataToHTML("sidePanel_name" + i,this.SidePanelLabels[i],i);
				this.mapProgressToHTML("sidePanel_Player" + i + "progress",this.SidePanelProgress[i]);
			} else {
				break;
			}
		}
	}
	,elementIsExist: function(htmlId) {
		return window.document.getElementById(htmlId) != null;
	}
	,mapDataToHTML: function(htmlId,data,id) {
		var nameHtml = window.document.getElementById(htmlId);
		nameHtml.innerHTML = "<b>" + data + "</b>";
		if(data == "") {
			var panelHtml = window.document.getElementById("sidePanel_playerPanelId" + id);
			panelHtml.style.display = "none";
		}
	}
	,mapProgressToHTML: function(htmlId,data) {
		var progressHtml = window.document.getElementById(htmlId);
		progressHtml.style.width = data;
	}
	,getProgressString: function(data) {
		if(data != null) {
			return data.expGained + "%";
		} else {
			return "0%";
		}
	}
	,updateData: function() {
		var _g = 0;
		while(_g < 6) {
			var i = _g++;
			if(model_Model.teamMode) {
				var _this = model_Model.playersData;
				var key = "team" + i;
				this.SidePanelLabels[i] = this.getLabelValueByPlayerData(__map_reserved[key] != null ? _this.getReserved(key) : _this.h[key]);
				var _this1 = model_Model.playersData;
				var key1 = "team" + i;
				this.SidePanelProgress[i] = this.getProgressString(__map_reserved[key1] != null ? _this1.getReserved(key1) : _this1.h[key1]);
			} else {
				var _this2 = model_Model.playersData;
				var key2 = "p" + i;
				this.SidePanelLabels[i] = this.getLabelValueByPlayerData(__map_reserved[key2] != null ? _this2.getReserved(key2) : _this2.h[key2]);
				var _this3 = model_Model.playersData;
				var key3 = "p" + i;
				this.SidePanelProgress[i] = this.getProgressString(__map_reserved[key3] != null ? _this3.getReserved(key3) : _this3.h[key3]);
			}
		}
	}
	,getLabelValueByPlayerData: function(data) {
		if(data != null) {
			return "" + data.label + " : mob slayed=" + data.slayedCounter + " lvl: " + data.currentLevel;
		} else {
			return "";
		}
	}
	,update: function() {
		this.updateData();
		this.updateView();
	}
};
var msignal_Signal = function(valueClasses) {
	if(valueClasses == null) {
		valueClasses = [];
	}
	this.valueClasses = valueClasses;
	this.slots = msignal_SlotList.NIL;
	this.priorityBased = false;
};
msignal_Signal.__name__ = true;
msignal_Signal.prototype = {
	add: function(listener) {
		return this.registerListener(listener);
	}
	,addOnce: function(listener) {
		return this.registerListener(listener,true);
	}
	,addWithPriority: function(listener,priority) {
		if(priority == null) {
			priority = 0;
		}
		return this.registerListener(listener,false,priority);
	}
	,addOnceWithPriority: function(listener,priority) {
		if(priority == null) {
			priority = 0;
		}
		return this.registerListener(listener,true,priority);
	}
	,remove: function(listener) {
		var slot = this.slots.find(listener);
		if(slot == null) {
			return null;
		}
		this.slots = this.slots.filterNot(listener);
		return slot;
	}
	,removeAll: function() {
		this.slots = msignal_SlotList.NIL;
	}
	,registerListener: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		if(this.registrationPossible(listener,once)) {
			var newSlot = this.createSlot(listener,once,priority);
			if(!this.priorityBased && priority != 0) {
				this.priorityBased = true;
			}
			if(!this.priorityBased && priority == 0) {
				this.slots = this.slots.prepend(newSlot);
			} else {
				this.slots = this.slots.insertWithPriority(newSlot);
			}
			return newSlot;
		}
		return this.slots.find(listener);
	}
	,registrationPossible: function(listener,once) {
		if(!this.slots.nonEmpty) {
			return true;
		}
		var existingSlot = this.slots.find(listener);
		if(existingSlot == null) {
			return true;
		}
		return false;
	}
	,createSlot: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		return null;
	}
	,get_numListeners: function() {
		return this.slots.get_length();
	}
};
var msignal_Signal1 = function(type) {
	msignal_Signal.call(this,[type]);
};
msignal_Signal1.__name__ = true;
msignal_Signal1.__super__ = msignal_Signal;
msignal_Signal1.prototype = $extend(msignal_Signal.prototype,{
	dispatch: function(value) {
		var slotsToProcess = this.slots;
		while(slotsToProcess.nonEmpty) {
			slotsToProcess.head.execute(value);
			slotsToProcess = slotsToProcess.tail;
		}
	}
	,createSlot: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		return new msignal_Slot1(this,listener,once,priority);
	}
});
var msignal_SlotList = function(head,tail) {
	this.nonEmpty = false;
	if(head == null && tail == null) {
		this.nonEmpty = false;
	} else if(head != null) {
		this.head = head;
		this.tail = tail == null ? msignal_SlotList.NIL : tail;
		this.nonEmpty = true;
	}
};
msignal_SlotList.__name__ = true;
msignal_SlotList.prototype = {
	get_length: function() {
		if(!this.nonEmpty) {
			return 0;
		}
		if(this.tail == msignal_SlotList.NIL) {
			return 1;
		}
		var result = 0;
		var p = this;
		while(p.nonEmpty) {
			++result;
			p = p.tail;
		}
		return result;
	}
	,prepend: function(slot) {
		return new msignal_SlotList(slot,this);
	}
	,append: function(slot) {
		if(slot == null) {
			return this;
		}
		if(!this.nonEmpty) {
			return new msignal_SlotList(slot);
		}
		if(this.tail == msignal_SlotList.NIL) {
			return new msignal_SlotList(slot).prepend(this.head);
		}
		var wholeClone = new msignal_SlotList(this.head);
		var subClone = wholeClone;
		var current = this.tail;
		while(current.nonEmpty) {
			subClone = subClone.tail = new msignal_SlotList(current.head);
			current = current.tail;
		}
		subClone.tail = new msignal_SlotList(slot);
		return wholeClone;
	}
	,insertWithPriority: function(slot) {
		if(!this.nonEmpty) {
			return new msignal_SlotList(slot);
		}
		var priority = slot.priority;
		if(priority >= this.head.priority) {
			return this.prepend(slot);
		}
		var wholeClone = new msignal_SlotList(this.head);
		var subClone = wholeClone;
		var current = this.tail;
		while(current.nonEmpty) {
			if(priority > current.head.priority) {
				subClone.tail = current.prepend(slot);
				return wholeClone;
			}
			subClone = subClone.tail = new msignal_SlotList(current.head);
			current = current.tail;
		}
		subClone.tail = new msignal_SlotList(slot);
		return wholeClone;
	}
	,filterNot: function(listener) {
		if(!this.nonEmpty || listener == null) {
			return this;
		}
		if(Reflect.compareMethods(this.head.listener,listener)) {
			return this.tail;
		}
		var wholeClone = new msignal_SlotList(this.head);
		var subClone = wholeClone;
		var current = this.tail;
		while(current.nonEmpty) {
			if(Reflect.compareMethods(current.head.listener,listener)) {
				subClone.tail = current.tail;
				return wholeClone;
			}
			subClone = subClone.tail = new msignal_SlotList(current.head);
			current = current.tail;
		}
		return this;
	}
	,contains: function(listener) {
		if(!this.nonEmpty) {
			return false;
		}
		var p = this;
		while(p.nonEmpty) {
			if(Reflect.compareMethods(p.head.listener,listener)) {
				return true;
			}
			p = p.tail;
		}
		return false;
	}
	,find: function(listener) {
		if(!this.nonEmpty) {
			return null;
		}
		var p = this;
		while(p.nonEmpty) {
			if(Reflect.compareMethods(p.head.listener,listener)) {
				return p.head;
			}
			p = p.tail;
		}
		return null;
	}
};
var htmlcontrols_store_GameActions = function() { };
htmlcontrols_store_GameActions.__name__ = true;
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
var model_DefaultValues = function() { };
model_DefaultValues.__name__ = true;
model_DefaultValues.init = function() {
	model_DefaultValues.slotsPVE.push(new model_Slot("Player 1",model_PlayerType.HORSEMAN,model_ControlType.MOUSE,400,300,"p1",1));
	model_DefaultValues.slotsPVE.push(new model_Slot("bot 1",model_PlayerType.SWORDMAN,model_ControlType.BOT_SIMPLE,200,300,"p2",2));
	model_DefaultValues.slotsPVE.push(new model_Slot("bot 2",model_PlayerType.SWORDMAN,model_ControlType.BOT_SIMPLE,300,300,"p3",2));
	model_DefaultValues.slotsPVE.push(new model_Slot("bot 3",model_PlayerType.SWORDMAN,model_ControlType.BOT_SIMPLE,500,300,"p4",2));
	model_DefaultValues.slotsPVE.push(new model_Slot("bot 4",model_PlayerType.SWORDMAN,model_ControlType.BOT_SIMPLE,600,300,"p5",2));
	model_DefaultValues.slotsPVE.push(new model_Slot("bot 5",model_PlayerType.ELF,model_ControlType.BOT_HARD,700,300,"p6",3));
	model_DefaultValues.slotsPVP.push(new model_Slot("Player 1",model_PlayerType.HORSEMAN,model_ControlType.MOUSE,400,300,"p1",1));
	model_DefaultValues.slotsPVP.push(new model_Slot("Player 2",model_PlayerType.BOWMAN,model_ControlType.ARROWS,500,300,"p2",2));
	model_DefaultValues.slotsPVP.push(new model_Slot("Player 3",model_PlayerType.MAGE,model_ControlType.AWSD,600,300,"p3",3));
	model_DefaultValues.slotsTEAMS.push(new model_Slot("Player 1",model_PlayerType.HORSEMAN,model_ControlType.MOUSE,400,300,"p1",1));
	model_DefaultValues.slotsTEAMS.push(new model_Slot("Player 2",model_PlayerType.SWORDMAN,model_ControlType.ARROWS,200,300,"p2",1));
	model_DefaultValues.slotsTEAMS.push(new model_Slot("Player 3",model_PlayerType.ELF,model_ControlType.AWSD,300,300,"p3",1));
	model_DefaultValues.slotsTEAMS.push(new model_Slot("bot 1",model_PlayerType.SWORDMAN,model_ControlType.BOT_HARD,500,300,"p4",3));
	model_DefaultValues.slotsTEAMS.push(new model_Slot("bot 2",model_PlayerType.MAGE,model_ControlType.BOT_HARD,600,300,"p5",3));
	model_DefaultValues.slotsTEAMS.push(new model_Slot("bot 3",model_PlayerType.HORSEMAN,model_ControlType.BOT_HARD,700,300,"p6",3));
};
var model_Slot = function(label,charType,controlType,x,y,name,skin) {
	this.name = name;
	this.controlType = controlType;
	this.charType = charType;
	this.x = x;
	this.y = y;
	this.label = label;
	this.skin = skin;
};
model_Slot.__name__ = true;
var model_CharacterConfig = function() {
};
model_CharacterConfig.__name__ = true;
var model_Model = function() { };
model_Model.__name__ = true;
model_Model.init = function() {
	model_Model.character.MOVE_SPEED = 150;
	model_Model.character.MIN_DISTANCE = 3;
	model_Model.mobAmount = model_DefaultValues.mobAmount;
	model_Model.maxLvl = model_DefaultValues.maxLvl;
	model_Model.baseExpGain = model_DefaultValues.baseExpGain;
	model_Model.screenMode = model_DefaultValues.screenMode;
	model_Model.showLabel = model_DefaultValues.showLabel;
	var _g = 0;
	while(_g < 6) {
		var i = _g++;
		if(model_DefaultValues.slots[i] != null) {
			model_Model.playersStartConfig.push(model_Model.getCharStartConfigByDefaultValues(i));
		} else {
			break;
		}
	}
};
model_Model.getCharStartConfigByDefaultValues = function(id) {
	var charType = model_DefaultValues.slots[id].charType;
	var name = model_DefaultValues.slots[id].name;
	var label = model_DefaultValues.slots[id].label;
	var x = model_DefaultValues.slots[id].x;
	var y = model_DefaultValues.slots[id].y;
	var control = model_DefaultValues.slots[id].controlType;
	var skin = model_DefaultValues.slots[id].skin;
	return new model_CharStartConfig(charType,x,y,label,name,control,skin);
};
var model_PhaserGameModel = function() {
};
model_PhaserGameModel.__name__ = true;
var model_Skin = function() {
};
model_Skin.__name__ = true;
var model_PlayerType = function() {
};
model_PlayerType.__name__ = true;
var model_ControlType = function() {
};
model_ControlType.__name__ = true;
var model_CharStartConfig = function(charType,x,y,label,name,control,skin) {
	this.charType = charType;
	this.x = x;
	this.y = y;
	this.label = label;
	this.name = name;
	this.control = control;
	this.skin = skin;
};
model_CharStartConfig.__name__ = true;
var model_PlayerData = function(slayedCounter,expGained,currentLevel,label,control,teamId) {
	this.slayedCounter = slayedCounter;
	this.expGained = expGained;
	this.currentLevel = currentLevel;
	this.label = label;
	this.control = control;
	this.teamId = teamId;
};
model_PlayerData.__name__ = true;
var model_MobData = function(currentLevel) {
	this.currentLevel = currentLevel;
};
model_MobData.__name__ = true;
var msignal_Signal0 = function() {
	msignal_Signal.call(this);
};
msignal_Signal0.__name__ = true;
msignal_Signal0.__super__ = msignal_Signal;
msignal_Signal0.prototype = $extend(msignal_Signal.prototype,{
	dispatch: function() {
		var slotsToProcess = this.slots;
		while(slotsToProcess.nonEmpty) {
			slotsToProcess.head.execute();
			slotsToProcess = slotsToProcess.tail;
		}
	}
	,createSlot: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		return new msignal_Slot0(this,listener,once,priority);
	}
});
var msignal_Signal2 = function(type1,type2) {
	msignal_Signal.call(this,[type1,type2]);
};
msignal_Signal2.__name__ = true;
msignal_Signal2.__super__ = msignal_Signal;
msignal_Signal2.prototype = $extend(msignal_Signal.prototype,{
	dispatch: function(value1,value2) {
		var slotsToProcess = this.slots;
		while(slotsToProcess.nonEmpty) {
			slotsToProcess.head.execute(value1,value2);
			slotsToProcess = slotsToProcess.tail;
		}
	}
	,createSlot: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		return new msignal_Slot2(this,listener,once,priority);
	}
});
var msignal_Slot = function(signal,listener,once,priority) {
	if(priority == null) {
		priority = 0;
	}
	if(once == null) {
		once = false;
	}
	this.signal = signal;
	this.set_listener(listener);
	this.once = once;
	this.priority = priority;
	this.enabled = true;
};
msignal_Slot.__name__ = true;
msignal_Slot.prototype = {
	remove: function() {
		this.signal.remove(this.listener);
	}
	,set_listener: function(value) {
		return this.listener = value;
	}
};
var msignal_Slot0 = function(signal,listener,once,priority) {
	if(priority == null) {
		priority = 0;
	}
	if(once == null) {
		once = false;
	}
	msignal_Slot.call(this,signal,listener,once,priority);
};
msignal_Slot0.__name__ = true;
msignal_Slot0.__super__ = msignal_Slot;
msignal_Slot0.prototype = $extend(msignal_Slot.prototype,{
	execute: function() {
		if(!this.enabled) {
			return;
		}
		if(this.once) {
			this.remove();
		}
		this.listener();
	}
});
var msignal_Slot1 = function(signal,listener,once,priority) {
	if(priority == null) {
		priority = 0;
	}
	if(once == null) {
		once = false;
	}
	msignal_Slot.call(this,signal,listener,once,priority);
};
msignal_Slot1.__name__ = true;
msignal_Slot1.__super__ = msignal_Slot;
msignal_Slot1.prototype = $extend(msignal_Slot.prototype,{
	execute: function(value1) {
		if(!this.enabled) {
			return;
		}
		if(this.once) {
			this.remove();
		}
		if(this.param != null) {
			value1 = this.param;
		}
		this.listener(value1);
	}
});
var msignal_Slot2 = function(signal,listener,once,priority) {
	if(priority == null) {
		priority = 0;
	}
	if(once == null) {
		once = false;
	}
	msignal_Slot.call(this,signal,listener,once,priority);
};
msignal_Slot2.__name__ = true;
msignal_Slot2.__super__ = msignal_Slot;
msignal_Slot2.prototype = $extend(msignal_Slot.prototype,{
	execute: function(value1,value2) {
		if(!this.enabled) {
			return;
		}
		if(this.once) {
			this.remove();
		}
		if(this.param1 != null) {
			value1 = this.param1;
		}
		if(this.param2 != null) {
			value2 = this.param2;
		}
		this.listener(value1,value2);
	}
});
var Phaser_Display_Color = function() { };
Phaser_Display_Color.__name__ = true;
var phasergame_CharackterAndMobData = function(charackter,mob) {
	this.charackter = charackter;
	this.mob = mob;
};
phasergame_CharackterAndMobData.__name__ = true;
var phasergame_CollisionDetector = function(phaserScene) {
	this.phaserScene = phaserScene;
};
phasergame_CollisionDetector.__name__ = true;
phasergame_CollisionDetector.prototype = {
	init: function(allCharacktersList,allMobList) {
		this.allCharacktersList = allCharacktersList;
		this.allMobList = allMobList;
		this.initCollisionDetections();
	}
	,onCharackterAndMob: function(callback) {
		this.onCharackterAndMobCallback = callback;
	}
	,initCollisionDetections: function() {
		var _gthis = this;
		var _g = 0;
		var _g1 = this.allCharacktersList;
		while(_g < _g1.length) {
			var charackter = _g1[_g];
			++_g;
			var _g2 = 0;
			var _g3 = this.allMobList;
			while(_g2 < _g3.length) {
				var mob = _g3[_g2];
				++_g2;
				var charackterBody = charackter.getPhysicBody();
				var mobBody = mob.getPhysicBody();
				var collision = this.phaserScene.physics.add.overlap(charackterBody,mobBody,function(charackter1,mob1) {
					_gthis.onCharackterAndMobCallback(new phasergame_CharackterAndMobData(charackter1.name,mob1.name));
				},null,this);
			}
		}
	}
};
var phasergame_MoverCharacters = function() {
	this.isPause = false;
	this.onPointerpressed = false;
	this.allPlayersList = [];
	this.allMobList = [];
};
phasergame_MoverCharacters.__name__ = true;
phasergame_MoverCharacters.prototype = {
	setPause: function(pause) {
		this.isPause = pause;
	}
	,setKeys: function(keys) {
		this.keys = keys;
	}
	,setCursor: function(cursor) {
		this.cursor = cursor;
	}
	,initMobs: function(allMobList) {
		this.allMobList = allMobList;
		var _g = 0;
		while(_g < allMobList.length) {
			var currentMob = allMobList[_g];
			++_g;
			this.simpleBotModel(currentMob,model_Model.mobTimeoutDelay);
		}
	}
	,initPlayers: function(allPlayersList) {
		this.allPlayersList = allPlayersList;
		var _g = 0;
		while(_g < allPlayersList.length) {
			var currentPlayer = allPlayersList[_g];
			++_g;
			var id = currentPlayer.getPhysicBody().name;
			var _this = model_Model.playersData;
			if((__map_reserved[id] != null ? _this.getReserved(id) : _this.h[id]).control == model_ControlType.BOT_SIMPLE) {
				this.simpleBotModel(currentPlayer,model_Model.botSimpleTimeoutDelay);
			} else {
				var _this1 = model_Model.playersData;
				if((__map_reserved[id] != null ? _this1.getReserved(id) : _this1.h[id]).control == model_ControlType.BOT_HARD) {
					this.hardBotModel(currentPlayer,model_Model.botHardTimeoutDelay);
				}
			}
		}
	}
	,simpleBotModel: function(target,delay) {
		var _gthis = this;
		var tmp = Utils.getRandomScreenX();
		var tmp1 = Utils.getRandomScreenY();
		target.setGoToXY(tmp,tmp1);
		var timer = new haxe_Timer(Std.random(delay / 2 | 0) + (delay / 2 | 0));
		timer.run = function() {
			if(!_gthis.isPause) {
				var tmp2 = Utils.getRandomScreenX();
				var tmp3 = Utils.getRandomScreenY();
				target.setGoToXY(tmp2,tmp3);
			}
		};
	}
	,hardBotModel: function(target,delay) {
		var _gthis = this;
		var closestMob = this.getClosestMob(target.getPhysicBody().x,target.getPhysicBody().y);
		var tmp = closestMob.getPhysicBody().x | 0;
		var tmp1 = closestMob.getPhysicBody().y | 0;
		target.setGoToXY(tmp,tmp1);
		var timer = new haxe_Timer(Std.random(delay / 2 | 0) + (delay / 2 | 0));
		timer.run = function() {
			if(!_gthis.isPause) {
				var closestMob1 = target.getPhysicBody().x;
				var closestMob2 = _gthis.getClosestMob(closestMob1,target.getPhysicBody().y);
				var tmp2 = closestMob2.getPhysicBody().x | 0;
				var tmp3 = closestMob2.getPhysicBody().y | 0;
				target.setGoToXY(tmp2,tmp3);
			}
		};
	}
	,getClosestMob: function(x,y) {
		var result = this.allMobList[0];
		var minDistanation = Utils.distanceBetween(x,y,result.getPhysicBody().x,result.getPhysicBody().y);
		var _g1 = 0;
		var _g = this.allMobList.length;
		while(_g1 < _g) {
			var i = _g1++;
			var mob = this.allMobList[i];
			var distanation = Utils.distanceBetween(x,y,mob.getPhysicBody().x,mob.getPhysicBody().y);
			if(distanation < minDistanation) {
				minDistanation = distanation;
				result = mob;
			}
		}
		return result;
	}
	,onPointerdown: function(pointer) {
		this.onPointerpressed = true;
		this.moveMouseTypedToPointer(pointer);
	}
	,onPointerup: function(pointer) {
		this.onPointerpressed = false;
	}
	,onPointermove: function(pointer) {
		if(this.onPointerpressed) {
			this.moveMouseTypedToPointer(pointer);
		}
	}
	,moveMouseTypedToPointer: function(pointer) {
		var _g = 0;
		var _g1 = this.allPlayersList;
		while(_g < _g1.length) {
			var currentPlayer = _g1[_g];
			++_g;
			var id = currentPlayer.getPhysicBody().name;
			var tmp;
			var _this = model_Model.playersData;
			if((__map_reserved[id] != null ? _this.getReserved(id) : _this.h[id]).control == model_ControlType.MOUSE) {
				tmp = !this.isPause;
			} else {
				tmp = false;
			}
			if(tmp) {
				currentPlayer.setGoToXY(pointer.x,pointer.y);
			}
		}
	}
	,update: function() {
		this.checkAWSDKeys();
		this.checkCursorKeys();
	}
	,checkAWSDKeys: function() {
		var deltaAWSDx = this.defineCursorMoveAxis(this.keys.D.isDown,this.keys.A.isDown);
		var deltaAWSDy = this.defineCursorMoveAxis(this.keys.S.isDown,this.keys.W.isDown);
		if(deltaAWSDx != 0 || deltaAWSDy != 0) {
			this.onControlKeysPressed(deltaAWSDx,deltaAWSDy,model_ControlType.AWSD);
		}
	}
	,checkCursorKeys: function() {
		var deltaCursorX = this.defineCursorMoveAxis(this.cursor.right.isDown,this.cursor.left.isDown);
		var deltaCursorY = this.defineCursorMoveAxis(this.cursor.down.isDown,this.cursor.up.isDown);
		if(deltaCursorX != 0 || deltaCursorY != 0) {
			this.onControlKeysPressed(deltaCursorX,deltaCursorY,model_ControlType.ARROWS);
		}
	}
	,defineCursorMoveAxis: function(isPositive,isNegative) {
		var delta = 10;
		var axis = isPositive ? delta : 0;
		if(isNegative) {
			return -1 * delta;
		} else {
			return axis;
		}
	}
	,onControlKeysPressed: function(deltaX,deltaY,keysFlag) {
		var _g = 0;
		var _g1 = this.allPlayersList;
		while(_g < _g1.length) {
			var currentPlayer = _g1[_g];
			++_g;
			var id = currentPlayer.getPhysicBody().name;
			var tmp;
			var _this = model_Model.playersData;
			if((__map_reserved[id] != null ? _this.getReserved(id) : _this.h[id]).control == keysFlag) {
				tmp = !this.isPause;
			} else {
				tmp = false;
			}
			if(tmp) {
				var targetX = (currentPlayer.getPhysicBody().x | 0) + deltaX;
				var targetY = (currentPlayer.getPhysicBody().y | 0) + deltaY;
				currentPlayer.setGoToXY(targetX,targetY);
			}
		}
	}
};
var phasergame_PhaserGame = function() {
};
phasergame_PhaserGame.__name__ = true;
phasergame_PhaserGame.prototype = {
	init: function(gameCanvas,sidePanelControl) {
		this.scene = new phasergame_PhaserScene(sidePanelControl);
		this.scene.setCallbackOnGameEnd($bind(this,this.onGameEndPhaserGame));
		this.game = new Phaser.Game({ width : model_Model.phaserGameWidth, height : model_Model.phaserGameHeight, canvas : gameCanvas, scene : this.scene, physics : { "default" : "arcade", "arcade" : { "debug" : false}}});
	}
	,setCallbackOnGameEnd: function(callback) {
		this.onGameEnd = callback;
	}
	,onGameEndPhaserGame: function() {
		this.onGameEnd();
	}
};
var phasergame_PhaserScene = function(sidePanelControl) {
	this.isPaused = false;
	Phaser.Scene.call(this,{ });
	this.background = new phasergame_sceneobjects_Background(this);
	this.playersCollection = new phasergame_sceneobjects_PlayersCollection(this);
	this.mobsCollection = new phasergame_sceneobjects_MobsCollection(this);
	this.collisionDetector = new phasergame_CollisionDetector(this);
	this.moverCharacters = new phasergame_MoverCharacters();
	this.sidePanelControl = sidePanelControl;
};
phasergame_PhaserScene.__name__ = true;
phasergame_PhaserScene.__super__ = Phaser.Scene;
phasergame_PhaserScene.prototype = $extend(Phaser.Scene.prototype,{
	setCallbackOnGameEnd: function(callback) {
		this.onGameEnd = callback;
	}
	,preload: function() {
		this.background.preload();
		this.playersCollection.preload();
		this.mobsCollection.preload();
	}
	,create: function() {
		var _gthis = this;
		this.background.init();
		this.mobsCollection.init(($_=this.moverCharacters,$bind($_,$_.initMobs)));
		this.playersCollection.init(($_=this.moverCharacters,$bind($_,$_.initPlayers)));
		this.collisionDetector.init(this.playersCollection.getAllPlayersList(),this.mobsCollection.getAllMobList());
		this.collisionDetector.onCharackterAndMob($bind(this,this.onCharackterAndMobCollision));
		this.input.on("pointerdown",function(pointer) {
			_gthis.moverCharacters.onPointerdown(pointer);
		},this);
		this.input.on("pointerup",function(pointer1) {
			_gthis.moverCharacters.onPointerup(pointer1);
		},this);
		this.input.on("pointermove",function(pointer2) {
			_gthis.moverCharacters.onPointermove(pointer2);
		},this);
		this.moverCharacters.setKeys(this.input.keyboard.addKeys("A,W,S,D"));
		this.moverCharacters.setCursor(this.input.keyboard.createCursorKeys());
	}
	,update: function(time,delta) {
		if(!this.isPaused) {
			Phaser.Scene.prototype.update.call(this,time,delta);
			this.moverCharacters.update();
			this.playersCollection.update(time,delta);
			this.mobsCollection.update(time,delta);
			this.sidePanelControl.update();
			this.checkGameEndCreteria();
		}
	}
	,onCharackterAndMobCollision: function(dataNameId) {
		var key = dataNameId.mob;
		var _this = model_Model.mobsData;
		var mobLvl = (__map_reserved[key] != null ? _this.getReserved(key) : _this.h[key]).currentLevel;
		this.playersCollection.onPlayerSlayMob(dataNameId.charackter,mobLvl);
		this.mobsCollection.onMobSlayed(dataNameId.mob);
	}
	,checkGameEndCreteria: function() {
		var isGameEnd = model_Model.maxLvlInGame == model_Model.maxLvl;
		if(isGameEnd) {
			this.onGameEnd();
			this.showEndGameMessage();
			this.physics.pause();
			this.moverCharacters.setPause(true);
			this.playersCollection.stopAll();
			this.mobsCollection.stopAll();
			this.isPaused = true;
		}
	}
	,showEndGameMessage: function() {
		var header = this.add.text(100,210,"Challenge is over",{ fontFamily : "Arial Black", fontSize : 74, color : "#ccd8ff"});
		header.setStroke("#8ca7f7",16);
		header.setShadow(2,2,"#333333",2,true,true);
		header.depth = 100500;
		var info = this.add.text(120,310,"winner is: " + model_Model.leaderPlayerLabel,{ fontFamily : "Arial Black", fontSize : 46, color : "#ccd8ff"});
		info.setShadow(2,2,"#333333",2,true,true);
		info.depth = 100500;
	}
});
var phasergame_sceneobjects_Background = function(phaserScene) {
	this.phaserScene = phaserScene;
	this.tilesetName = "tiles";
};
phasergame_sceneobjects_Background.__name__ = true;
phasergame_sceneobjects_Background.prototype = {
	preload: function() {
		this.phaserScene.load.image(this.tilesetName,"assets/tiles.png");
	}
	,init: function() {
		var _g = [];
		var _g1 = 0;
		while(_g1 < 22) {
			var x = _g1++;
			var _g2 = [];
			var _g3 = 0;
			while(_g3 < 31) {
				var y = _g3++;
				_g2.push(Std.random(8));
			}
			_g.push(_g2);
		}
		var dynamicMap = _g;
		var map = this.phaserScene.add.tilemap("dynamicMap",32,32,0,0,dynamicMap);
		var tiles = map.addTilesetImage(this.tilesetName);
		var layer = map.createStaticLayer(0,tiles,0,0);
	}
};
var phasergame_sceneobjects_Character = function(phaserScene,config) {
	this.MIN_DISTANCE = model_Model.character.MIN_DISTANCE;
	this.MOVE_SPEED = model_Model.character.MOVE_SPEED;
	this.IDLE_POSE_ID = 1;
	this.phaserScene = phaserScene;
	this.config = config;
};
phasergame_sceneobjects_Character.__name__ = true;
phasergame_sceneobjects_Character.prototype = {
	init: function() {
		var _g = 1;
		while(_g < 11) {
			var i = _g++;
			var key = this.getIdByLine(i);
			if(this.phaserScene.anims.get(key) == null) {
				this.phaserScene.anims.create(this.getAnimationConfig(this.config.charType,i));
			}
		}
		this.sprite = this.phaserScene.physics.add.sprite(this.config.x,this.config.y,this.config.charType).setScale(1.5);
		this.sprite.setSize(16,16);
		this.sprite.body.offset.x = 8;
		this.sprite.body.offset.y = 8;
		this.sprite.name = this.config.name;
		this.sprite.depth = this.config.y;
		this.setAnimation(this.IDLE_POSE_ID);
		this.setLabel(this.config.label);
	}
	,reinit: function(config) {
		this.config = config;
		var _g = 1;
		while(_g < 11) {
			var i = _g++;
			var key = this.getIdByLine(i);
			if(this.phaserScene.anims.get(key) == null) {
				this.phaserScene.anims.create(this.getAnimationConfig(config.charType,i));
			}
		}
		this.setAnimation(this.IDLE_POSE_ID);
		this.text.text = config.label;
		this.text.updateText();
	}
	,setLabel: function(label) {
		this.text = this.phaserScene.add.text(this.sprite.x,this.sprite.y,label);
		this.text.visible = model_Model.showLabel;
		this.updateTextPosition();
	}
	,setSpeed: function(speed) {
		this.MOVE_SPEED = speed;
	}
	,setAnimation: function(lineId) {
		var animationId = this.getIdByLine(lineId);
		if(this.sprite.anims.getCurrentKey() != animationId) {
			this.sprite.anims.load(animationId);
			this.sprite.anims.play(animationId);
		}
	}
	,getIdByLine: function(lineId) {
		return "typeId:" + this.config.charType + "}_lineId:" + lineId + "_skin:" + this.config.skin;
	}
	,getAnimationConfig: function(typeId,lineId) {
		var result = { key : this.getIdByLine(lineId), frames : this.phaserScene.anims.generateFrameNumbers(typeId,this.getFrameConfigByLineId(lineId)), frameRate : 6, yoyo : true, repeat : -1};
		return result;
	}
	,getFrameConfigByLineId: function(lineId) {
		var key = this.config.charType;
		var _this = model_Model.skinsCollection;
		var maxSkins = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
		lineId = (lineId - 1) * 4 + 4 * (maxSkins - 1) * (lineId - 1) + 4 * (this.config.skin - 1);
		return this.getFrameConfig(lineId,lineId + 3);
	}
	,getFrameConfig: function(start,end) {
		var result = { start : start, end : end};
		return result;
	}
	,setGoToXY: function(x,y) {
		var tx = x - this.sprite.x;
		var ty = y - this.sprite.y;
		var dist = Math.sqrt(tx * tx + ty * ty);
		var rad = Math.atan2(ty,tx);
		var angle = rad / Math.PI * 180;
		this.setAnimation(this.detectPosByAngle(angle));
		this.phaserScene.physics.moveTo(this.sprite,x,y,this.MOVE_SPEED);
		this.xDestination = x;
		this.yDestination = y;
	}
	,setXY: function(x,y) {
		this.sprite.x = x;
		this.sprite.y = y;
	}
	,detectPosByAngle: function(angle) {
		var result = 3;
		angle += 180;
		if(angle <= 112 && angle >= 67) {
			result = 6;
		}
		if(angle <= 67 && angle >= 22) {
			result = 10;
		}
		if(angle <= 157 && angle >= 112) {
			result = 9;
		}
		if(angle <= 202 && angle >= 157) {
			result = 4;
		}
		if(angle <= 247 && angle >= 202) {
			result = 7;
		}
		if(angle <= 292 && angle >= 247) {
			result = 5;
		}
		if(angle <= 337 && angle >= 292) {
			result = 8;
		}
		return result;
	}
	,update: function(time,delta) {
		this.checkDestinationReached();
		this.sprite.depth = this.sprite.y;
		this.updateTextPosition();
	}
	,updateTextPosition: function() {
		this.text.x = this.sprite.x - this.text.width / 2;
		this.text.y = this.sprite.y - this.sprite.height * 1.35;
		this.text.depth = this.sprite.y + 1;
	}
	,checkDestinationReached: function() {
		var distance = Utils.distanceBetween(this.sprite.x,this.sprite.y,this.xDestination,this.yDestination);
		if(distance < this.MIN_DISTANCE) {
			this.sprite.body.velocity.x = 0;
			this.sprite.body.velocity.y = 0;
			this.sprite.x = this.xDestination;
			this.sprite.y = this.yDestination;
			this.setAnimation(this.IDLE_POSE_ID);
		}
	}
	,getPhysicBody: function() {
		return this.sprite;
	}
};
var phasergame_sceneobjects_MobsCollection = function(phaserScene) {
	this.allMobList = [];
	this.phaserScene = phaserScene;
};
phasergame_sceneobjects_MobsCollection.__name__ = true;
phasergame_sceneobjects_MobsCollection.prototype = {
	preload: function() {
		var frameSize = 32;
		var frmeConfig = { frameWidth : frameSize, frameHeight : frameSize};
		this.phaserScene.load.spritesheet(model_Model.mobTypes[0],"assets/mob1lvl.png",frmeConfig);
		var k = model_Model.mobTypes[0];
		var _this = model_Model.skinsCollection;
		if(__map_reserved[k] != null) {
			_this.setReserved(k,1);
		} else {
			_this.h[k] = 1;
		}
		this.phaserScene.load.spritesheet(model_Model.mobTypes[1],"assets/mob2lvl.png",frmeConfig);
		var k1 = model_Model.mobTypes[1];
		var _this1 = model_Model.skinsCollection;
		if(__map_reserved[k1] != null) {
			_this1.setReserved(k1,1);
		} else {
			_this1.h[k1] = 1;
		}
		this.phaserScene.load.spritesheet(model_Model.mobTypes[2],"assets/mob3lvl.png",frmeConfig);
		var k2 = model_Model.mobTypes[2];
		var _this2 = model_Model.skinsCollection;
		if(__map_reserved[k2] != null) {
			_this2.setReserved(k2,1);
		} else {
			_this2.h[k2] = 1;
		}
		this.phaserScene.load.spritesheet(model_Model.mobTypes[3],"assets/mob4lvl.png",frmeConfig);
		var k3 = model_Model.mobTypes[3];
		var _this3 = model_Model.skinsCollection;
		if(__map_reserved[k3] != null) {
			_this3.setReserved(k3,1);
		} else {
			_this3.h[k3] = 1;
		}
		this.phaserScene.load.spritesheet(model_Model.mobTypes[4],"assets/mob5lvl.png",frmeConfig);
		var k4 = model_Model.mobTypes[4];
		var _this4 = model_Model.skinsCollection;
		if(__map_reserved[k4] != null) {
			_this4.setReserved(k4,1);
		} else {
			_this4.h[k4] = 1;
		}
	}
	,init: function(onReadyToMove) {
		var lvlId = 0;
		var mobId = 1;
		var _g1 = 0;
		var _g = model_Model.mobAmount;
		while(_g1 < _g) {
			var mob = _g1++;
			var mobConfig = this.getMobConfigByLvl(lvlId,mobId);
			var mob1 = new phasergame_sceneobjects_Character(this.phaserScene,mobConfig);
			mob1.init();
			mob1.setSpeed(model_Model.mobSpeeds[lvlId]);
			this.allMobList.push(mob1);
			var this1 = model_Model.mobsData;
			var k = mob1.getPhysicBody().name;
			var v = new model_MobData(1);
			var _this = this1;
			if(__map_reserved[k] != null) {
				_this.setReserved(k,v);
			} else {
				_this.h[k] = v;
			}
			++mobId;
		}
		onReadyToMove(this.allMobList);
	}
	,getMobConfigByLvl: function(lvlId,mobId) {
		var mobX = Utils.getRandomScreenX();
		var mobY = Utils.getRandomScreenY();
		return new model_CharStartConfig(model_Model.mobTypes[lvlId],mobX,mobY,model_Model.mobLabels[lvlId],"m" + mobId,model_ControlType.BOT_SIMPLE,1);
	}
	,update: function(time,delta) {
		var _g = 0;
		var _g1 = this.allMobList;
		while(_g < _g1.length) {
			var currentMob = _g1[_g];
			++_g;
			currentMob.update(time,delta);
		}
	}
	,stopAll: function() {
		var _g = 0;
		var _g1 = this.allMobList;
		while(_g < _g1.length) {
			var currentMob = _g1[_g];
			++_g;
			currentMob.getPhysicBody().anims.pause();
		}
	}
	,getAllMobList: function() {
		return this.allMobList;
	}
	,onMobSlayed: function(mobId) {
		var mob = this.findMobById(mobId);
		if(mob != null) {
			var lvlId = Std.random(model_Model.maxLvlInGame + 1);
			if(lvlId > model_Model.maxMobLvlId) {
				lvlId = model_Model.maxMobLvlId;
			} else {
				lvlId = lvlId;
			}
			var mobConfig = this.getMobConfigByLvl(lvlId,0);
			mob.reinit(mobConfig);
			mob.setSpeed(model_Model.mobSpeeds[lvlId]);
			mob.setXY(Utils.getRandomScreenX(),Utils.getRandomScreenY());
			mob.setGoToXY(Utils.getRandomScreenX(),Utils.getRandomScreenY());
			var this1 = model_Model.mobsData;
			var key = mob.getPhysicBody().name;
			var _this = this1;
			(__map_reserved[key] != null ? _this.getReserved(key) : _this.h[key]).currentLevel = lvlId + 1;
		}
	}
	,findMobById: function(mobId) {
		var _g = 0;
		var _g1 = this.allMobList;
		while(_g < _g1.length) {
			var currentMob = _g1[_g];
			++_g;
			if(currentMob.getPhysicBody().name == mobId) {
				return currentMob;
			}
		}
		return null;
	}
};
var phasergame_sceneobjects_PlayersCollection = function(phaserScene) {
	this.allPlayersList = [];
	this.phaserScene = phaserScene;
};
phasergame_sceneobjects_PlayersCollection.__name__ = true;
phasergame_sceneobjects_PlayersCollection.prototype = {
	preload: function() {
		var frameSize = 32;
		var frmeConfig = { frameWidth : frameSize, frameHeight : frameSize};
		this.phaserScene.load.spritesheet(model_PlayerType.SWORDMAN,"assets/char_swordman.png",frmeConfig);
		var k = model_PlayerType.SWORDMAN;
		var _this = model_Model.skinsCollection;
		if(__map_reserved[k] != null) {
			_this.setReserved(k,3);
		} else {
			_this.h[k] = 3;
		}
		this.phaserScene.load.spritesheet(model_PlayerType.BOWMAN,"assets/char_bowman.png",frmeConfig);
		var k1 = model_PlayerType.BOWMAN;
		var _this1 = model_Model.skinsCollection;
		if(__map_reserved[k1] != null) {
			_this1.setReserved(k1,3);
		} else {
			_this1.h[k1] = 3;
		}
		this.phaserScene.load.spritesheet(model_PlayerType.ELF,"assets/char_elf.png",frmeConfig);
		var k2 = model_PlayerType.ELF;
		var _this2 = model_Model.skinsCollection;
		if(__map_reserved[k2] != null) {
			_this2.setReserved(k2,3);
		} else {
			_this2.h[k2] = 3;
		}
		this.phaserScene.load.spritesheet(model_PlayerType.MAGE,"assets/char_mage.png",frmeConfig);
		var k3 = model_PlayerType.MAGE;
		var _this3 = model_Model.skinsCollection;
		if(__map_reserved[k3] != null) {
			_this3.setReserved(k3,3);
		} else {
			_this3.h[k3] = 3;
		}
		this.phaserScene.load.spritesheet(model_PlayerType.HORSEMAN,"assets/char_horseman.png",frmeConfig);
		var k4 = model_PlayerType.HORSEMAN;
		var _this4 = model_Model.skinsCollection;
		if(__map_reserved[k4] != null) {
			_this4.setReserved(k4,3);
		} else {
			_this4.h[k4] = 3;
		}
	}
	,preparePlayerByConfig: function(config) {
		var player = new phasergame_sceneobjects_Character(this.phaserScene,config);
		player.init();
		this.allPlayersList.push(player);
		return player;
	}
	,init: function(onReadyToMove) {
		var _g = 0;
		while(_g < 6) {
			var i = _g++;
			var playerConfig = model_Model.playersStartConfig[i];
			if(playerConfig != null && playerConfig.control != model_ControlType.NONE) {
				var player = this.preparePlayerByConfig(playerConfig);
				var this1 = model_Model.playersData;
				var k = playerConfig.name;
				var v = new model_PlayerData(0,0,1,playerConfig.label,playerConfig.control,playerConfig.skin);
				var _this = this1;
				if(__map_reserved[k] != null) {
					_this.setReserved(k,v);
				} else {
					_this.h[k] = v;
				}
				var teamId = "team" + playerConfig.skin;
				var _this1 = model_Model.playersData;
				if((__map_reserved[teamId] != null ? _this1.getReserved(teamId) : _this1.h[teamId]) == null) {
					var this2 = model_Model.playersData;
					var v1 = new model_PlayerData(0,0,1,teamId,"",-1);
					var _this2 = this2;
					if(__map_reserved[teamId] != null) {
						_this2.setReserved(teamId,v1);
					} else {
						_this2.h[teamId] = v1;
					}
				}
			}
		}
		onReadyToMove(this.allPlayersList);
	}
	,update: function(time,delta) {
		var _g = 0;
		var _g1 = this.allPlayersList;
		while(_g < _g1.length) {
			var currentPlayer = _g1[_g];
			++_g;
			currentPlayer.update(time,delta);
		}
	}
	,stopAll: function() {
		var _g = 0;
		var _g1 = this.allPlayersList;
		while(_g < _g1.length) {
			var currentPlayer = _g1[_g];
			++_g;
			currentPlayer.getPhysicBody().anims.pause();
		}
	}
	,getAllPlayersList: function() {
		return this.allPlayersList;
	}
	,onPlayerSlayMob: function(playerId,mobLvl) {
		model_Model.totalMobSlayedCounter++;
		if(model_Model.teamMode) {
			var this1 = model_Model.playersData;
			var _this = model_Model.playersData;
			var key = "team" + (__map_reserved[playerId] != null ? _this.getReserved(playerId) : _this.h[playerId]).teamId;
			var _this1 = this1;
			var teamData = __map_reserved[key] != null ? _this1.getReserved(key) : _this1.h[key];
			this.updatePlayerDataOnMobSlayed(teamData,mobLvl);
		} else {
			var _this2 = model_Model.playersData;
			this.updatePlayerDataOnMobSlayed(__map_reserved[playerId] != null ? _this2.getReserved(playerId) : _this2.h[playerId],mobLvl);
		}
	}
	,updatePlayerDataOnMobSlayed: function(playerData,mobLvl) {
		playerData.slayedCounter++;
		playerData.expGained += model_Model.baseExpGain * mobLvl / playerData.currentLevel;
		if(playerData.expGained >= 100) {
			playerData.expGained = 0;
			playerData.currentLevel++;
			if(playerData.currentLevel > model_Model.maxLvlInGame) {
				model_Model.maxLvlInGame = playerData.currentLevel;
				model_Model.leaderPlayerLabel = playerData.label;
			}
		}
	}
};
var react_ReactMacro = function() { };
react_ReactMacro.__name__ = true;
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
String.__name__ = true;
Array.__name__ = true;
var __map_reserved = {};
var $$tre = (typeof Symbol === "function" && Symbol.for && Symbol.for("react.element")) || 0xeac7;
msignal_SlotList.NIL = new msignal_SlotList(null,null);
htmlcontrols_mainmenu_GameModes.displayName = "GameModes";
htmlcontrols_mainmenu_GamePlayOptions.displayName = "GamePlayOptions";
htmlcontrols_mainmenu_MainMenu.displayName = "MainMenu";
htmlcontrols_mainmenu_helppage_HelpPage.displayName = "HelpPage";
htmlcontrols_mainmenu_lobby_LobbyPanel.displayName = "LobbyPanel";
htmlcontrols_mainmenu_lobby_SelectInput.displayName = "SelectInput";
htmlcontrols_mainmenu_lobby_TextInput.displayName = "TextInput";
htmlcontrols_sidepanel_SidePanel.displayName = "SidePanel";
htmlcontrols_store_GameActions.navigateToPage = new msignal_Signal1();
htmlcontrols_store_GameActions.startGame = new msignal_Signal1();
htmlcontrols_store_GameActions.pagePVE = "PVE";
htmlcontrols_store_GameActions.pagePVP = "PVP";
htmlcontrols_store_GameActions.pageTeams = "TEAMS";
htmlcontrols_store_GameActions.pageHelp = "HELP";
model_DefaultValues.slotsPVP = [];
model_DefaultValues.slotsPVE = [];
model_DefaultValues.slotsTEAMS = [];
model_DefaultValues.slots = [];
model_DefaultValues.mobAmount = 5;
model_DefaultValues.maxLvl = 5;
model_DefaultValues.baseExpGain = 25;
model_DefaultValues.screenMode = "";
model_DefaultValues.showLabel = true;
model_Model.phaserGameWidth = 950;
model_Model.phaserGameHeight = 654;
model_Model.botSimpleTimeoutDelay = 1000;
model_Model.botHardTimeoutDelay = 750;
model_Model.mobTimeoutDelay = 1000;
model_Model.character = new model_CharacterConfig();
model_Model.playersStartConfig = [];
model_Model.maxLvlInGame = 1;
model_Model.teamMode = false;
model_Model.mobTypes = ["mob1lvl","mob2lvl","mob3lvl","mob4lvl","mob5lvl"];
model_Model.mobLabels = ["lvl 1","lvl 2","lvl 3","lvl 4","lvl 5"];
model_Model.mobSpeeds = [100,5,25,300,300];
model_Model.maxMobLvlId = 4;
model_Model.totalMobSlayedCounter = 0;
model_Model.playersData = new haxe_ds_StringMap();
model_Model.mobsData = new haxe_ds_StringMap();
model_Model.skinsCollection = new haxe_ds_StringMap();
model_Skin.RED = 1;
model_Skin.GREEN = 2;
model_Skin.BLUE = 3;
model_PlayerType.SWORDMAN = "swordman";
model_PlayerType.BOWMAN = "bowman";
model_PlayerType.ELF = "elf";
model_PlayerType.MAGE = "mage";
model_PlayerType.HORSEMAN = "horseman";
model_ControlType.MOUSE = "mouse";
model_ControlType.ARROWS = "keys_arrows";
model_ControlType.AWSD = "keys_awsd";
model_ControlType.BOT_SIMPLE = "bot_simple";
model_ControlType.BOT_HARD = "bot_hard";
model_ControlType.NONE = "none";
Main.main();
})();
